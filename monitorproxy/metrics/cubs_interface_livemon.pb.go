// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cubs_interface_livemon.proto

package metrics

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LiveReport struct {
	Interfaces []*InterfaceStat           `protobuf:"bytes,1,rep,name=interfaces" json:"interfaces"`
	DeviceSn   string                     `protobuf:"bytes,2,opt,name=device_sn,json=deviceSn" json:"device_sn"`
	Timestamp  *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp"`
}

func (m *LiveReport) Reset()                    { *m = LiveReport{} }
func (m *LiveReport) String() string            { return proto.CompactTextString(m) }
func (*LiveReport) ProtoMessage()               {}
func (*LiveReport) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *LiveReport) GetInterfaces() []*InterfaceStat {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *LiveReport) GetDeviceSn() string {
	if m != nil {
		return m.DeviceSn
	}
	return ""
}

func (m *LiveReport) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type InterfaceStat struct {
	// @inject_tag: label:"name=?"
	Name    string            `protobuf:"bytes,1,opt,name=name" json:"name" label:"name=?"`
	Metrics *InterfaceMetrics `protobuf:"bytes,2,opt,name=metrics" json:"metrics"`
	// @inject_tag: label:"protocol=icmp"
	IcmpMetrics *L4ProtocolMetrics `protobuf:"bytes,3,opt,name=icmp_metrics,json=icmpMetrics" json:"icmp_metrics" label:"protocol=icmp"`
	// @inject_tag: label:"protocol=tcp"
	TcpMetrics *L4ProtocolMetrics `protobuf:"bytes,4,opt,name=tcp_metrics,json=tcpMetrics" json:"tcp_metrics" label:"protocol=tcp"`
	// @inject_tag: label:"protocol=udp"
	UdpMetrics *L4ProtocolMetrics `protobuf:"bytes,5,opt,name=udp_metrics,json=udpMetrics" json:"udp_metrics" label:"protocol=udp"`
	// @inject_tag: label:"protocol=other"
	OtherMetrics *L4ProtocolMetrics `protobuf:"bytes,6,opt,name=other_metrics,json=otherMetrics" json:"other_metrics" label:"protocol=other"`
}

func (m *InterfaceStat) Reset()                    { *m = InterfaceStat{} }
func (m *InterfaceStat) String() string            { return proto.CompactTextString(m) }
func (*InterfaceStat) ProtoMessage()               {}
func (*InterfaceStat) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *InterfaceStat) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InterfaceStat) GetMetrics() *InterfaceMetrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *InterfaceStat) GetIcmpMetrics() *L4ProtocolMetrics {
	if m != nil {
		return m.IcmpMetrics
	}
	return nil
}

func (m *InterfaceStat) GetTcpMetrics() *L4ProtocolMetrics {
	if m != nil {
		return m.TcpMetrics
	}
	return nil
}

func (m *InterfaceStat) GetUdpMetrics() *L4ProtocolMetrics {
	if m != nil {
		return m.UdpMetrics
	}
	return nil
}

func (m *InterfaceStat) GetOtherMetrics() *L4ProtocolMetrics {
	if m != nil {
		return m.OtherMetrics
	}
	return nil
}

type InterfaceMetrics struct {
	// @inject_tag: labelnames:"name" help:"Jitter in milliseconds for traffic on a interface"
	JitterMilliseconds uint64 `protobuf:"varint,1,opt,name=jitter_milliseconds,json=jitterMilliseconds" json:"jitter_milliseconds" labelnames:"name" help:"Jitter in milliseconds for traffic on a interface"`
	// @inject_tag: help:"Total packet loss for an interface"
	PacketLost uint64 `protobuf:"varint,2,opt,name=packet_lost,json=packetLost" json:"packet_lost" help:"Total packet loss for an interface"`
}

func (m *InterfaceMetrics) Reset()                    { *m = InterfaceMetrics{} }
func (m *InterfaceMetrics) String() string            { return proto.CompactTextString(m) }
func (*InterfaceMetrics) ProtoMessage()               {}
func (*InterfaceMetrics) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *InterfaceMetrics) GetJitterMilliseconds() uint64 {
	if m != nil {
		return m.JitterMilliseconds
	}
	return 0
}

func (m *InterfaceMetrics) GetPacketLost() uint64 {
	if m != nil {
		return m.PacketLost
	}
	return 0
}

type L4ProtocolMetrics struct {
	// @inject_tag: labelnames:"name,protocol" help:"Accumulated ingress octets for a specific transport protocol"
	InOctets uint64 `protobuf:"varint,1,opt,name=in_octets,json=inOctets" json:"in_octets" labelnames:"name,protocol" help:"Accumulated ingress octets for a specific transport protocol"`
	// @inject_tag: help:"Accumulated ingress packets for a specific transport protocol"
	InPackets uint64 `protobuf:"varint,2,opt,name=in_packets,json=inPackets" json:"in_packets" help:"Accumulated ingress packets for a specific transport protocol"`
	// @inject_tag: help:"Accumulated egress octets for a specific transport protocol"
	OutOctets uint64 `protobuf:"varint,3,opt,name=out_octets,json=outOctets" json:"out_octets" help:"Accumulated egress octets for a specific transport protocol"`
	// @inject_tag: help:"Accumulated egress packets for a specific transport protocol"
	OutPackets uint64 `protobuf:"varint,4,opt,name=out_packets,json=outPackets" json:"out_packets" help:"Accumulated egress packets for a specific transport protocol"`
}

func (m *L4ProtocolMetrics) Reset()                    { *m = L4ProtocolMetrics{} }
func (m *L4ProtocolMetrics) String() string            { return proto.CompactTextString(m) }
func (*L4ProtocolMetrics) ProtoMessage()               {}
func (*L4ProtocolMetrics) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *L4ProtocolMetrics) GetInOctets() uint64 {
	if m != nil {
		return m.InOctets
	}
	return 0
}

func (m *L4ProtocolMetrics) GetInPackets() uint64 {
	if m != nil {
		return m.InPackets
	}
	return 0
}

func (m *L4ProtocolMetrics) GetOutOctets() uint64 {
	if m != nil {
		return m.OutOctets
	}
	return 0
}

func (m *L4ProtocolMetrics) GetOutPackets() uint64 {
	if m != nil {
		return m.OutPackets
	}
	return 0
}

func init() {
	proto.RegisterType((*LiveReport)(nil), "metrics.LiveReport")
	proto.RegisterType((*InterfaceStat)(nil), "metrics.InterfaceStat")
	proto.RegisterType((*InterfaceMetrics)(nil), "metrics.InterfaceMetrics")
	proto.RegisterType((*L4ProtocolMetrics)(nil), "metrics.L4ProtocolMetrics")
}

func init() { proto.RegisterFile("cubs_interface_livemon.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xd1, 0x8a, 0xda, 0x40,
	0x14, 0x86, 0x89, 0xa6, 0xd6, 0x9c, 0x28, 0xb4, 0x53, 0x28, 0xa9, 0x6d, 0x51, 0x72, 0xe5, 0x55,
	0x04, 0x2d, 0xa5, 0x50, 0x4a, 0xaf, 0x0b, 0x4a, 0x25, 0xf6, 0x3e, 0xc4, 0xc9, 0x68, 0x67, 0x37,
	0x99, 0x09, 0x99, 0x13, 0x5f, 0x63, 0x1f, 0x60, 0xdf, 0x6a, 0x9f, 0x68, 0xc9, 0x4c, 0x26, 0xba,
	0xeb, 0x85, 0x77, 0x99, 0xf3, 0xff, 0xdf, 0x7f, 0xfe, 0x0c, 0x03, 0x5f, 0x68, 0xbd, 0x57, 0x09,
	0x17, 0xc8, 0xaa, 0x43, 0x4a, 0x59, 0x92, 0xf3, 0x13, 0x2b, 0xa4, 0x88, 0xca, 0x4a, 0xa2, 0x24,
	0x6f, 0x0b, 0x86, 0x15, 0xa7, 0x6a, 0x32, 0x3d, 0x4a, 0x79, 0xcc, 0xd9, 0x42, 0x8f, 0xf7, 0xf5,
	0x61, 0x81, 0xbc, 0x60, 0x0a, 0xd3, 0xa2, 0x34, 0xce, 0xf0, 0xd1, 0x01, 0x58, 0xf3, 0x13, 0x8b,
	0x59, 0x29, 0x2b, 0x24, 0xdf, 0x01, 0xba, 0x4c, 0x15, 0x38, 0xb3, 0xfe, 0xdc, 0x5f, 0x7e, 0x8c,
	0xda, 0xb4, 0xe8, 0x8f, 0x95, 0x76, 0x98, 0x62, 0x7c, 0xe1, 0x24, 0x9f, 0xc1, 0xcb, 0xd8, 0x89,
	0x53, 0x96, 0x28, 0x11, 0xf4, 0x66, 0xce, 0xdc, 0x8b, 0x87, 0x66, 0xb0, 0x13, 0xe4, 0x07, 0x78,
	0xdd, 0xda, 0xa0, 0x3f, 0x73, 0xe6, 0xfe, 0x72, 0x12, 0x99, 0x62, 0x91, 0x2d, 0x16, 0xfd, 0xb3,
	0x8e, 0xf8, 0x6c, 0x0e, 0x9f, 0x7a, 0x30, 0x7e, 0xb1, 0x94, 0x10, 0x70, 0x45, 0x5a, 0xb0, 0xc0,
	0xd1, 0x3b, 0xf4, 0x37, 0x59, 0x81, 0xfd, 0x5f, 0xbd, 0xda, 0x5f, 0x7e, 0xba, 0x6e, 0xbc, 0x31,
	0x83, 0xd8, 0x3a, 0xc9, 0x2f, 0x18, 0x71, 0x5a, 0x94, 0x89, 0x25, 0x6d, 0x2f, 0x4b, 0xae, 0xbf,
	0x6d, 0x9b, 0x6a, 0x54, 0xe6, 0x16, 0xf5, 0x1b, 0x7f, 0x7b, 0x20, 0x3f, 0xc1, 0x47, 0x7a, 0xa6,
	0xdd, 0x9b, 0x34, 0x20, 0xbd, 0x84, 0xeb, 0xec, 0x0c, 0xbf, 0xb9, 0x0d, 0xd7, 0x59, 0x07, 0xff,
	0x86, 0xb1, 0xc4, 0xff, 0xac, 0xea, 0xf0, 0xc1, 0x4d, 0x7c, 0xa4, 0x81, 0xf6, 0x14, 0x66, 0xf0,
	0xee, 0xf5, 0xb5, 0x90, 0x05, 0x7c, 0xb8, 0xe3, 0x88, 0x4d, 0x2a, 0xcf, 0x73, 0xae, 0x18, 0x95,
	0x22, 0x53, 0xfa, 0x96, 0xdd, 0x98, 0x18, 0x69, 0x73, 0xa1, 0x90, 0x29, 0xf8, 0x65, 0x4a, 0xef,
	0x19, 0x26, 0xb9, 0x54, 0xa8, 0xef, 0xdd, 0x8d, 0xc1, 0x8c, 0xd6, 0x52, 0x61, 0xf8, 0xe0, 0xc0,
	0xfb, 0xab, 0x26, 0xcd, 0x3b, 0xe1, 0x22, 0x91, 0x14, 0x19, 0xda, 0xf4, 0x21, 0x17, 0x7f, 0xf5,
	0x99, 0x7c, 0x6d, 0x1e, 0x5f, 0x62, 0x32, 0x54, 0x1b, 0xe9, 0x71, 0xb1, 0x35, 0x83, 0x46, 0x96,
	0x35, 0x5a, 0xb8, 0x6f, 0x64, 0x59, 0x63, 0x4b, 0x4f, 0xc1, 0x6f, 0x64, 0x8b, 0xbb, 0xa6, 0x91,
	0xac, 0xb1, 0xe5, 0xf7, 0x03, 0xfd, 0xd6, 0x56, 0xcf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8e, 0xf3,
	0xd8, 0x41, 0x3b, 0x03, 0x00, 0x00,
}
