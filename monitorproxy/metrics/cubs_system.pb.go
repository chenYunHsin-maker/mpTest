// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cubs_system.proto

package metrics

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CPUMetrics struct {
	Utilization     uint32 `protobuf:"varint,1,opt,name=utilization" json:"utilization"`
	Utilization1Min uint32 `protobuf:"varint,2,opt,name=utilization1min" json:"utilization1min"`
	Utilization5Min uint32 `protobuf:"varint,3,opt,name=utilization5min" json:"utilization5min"`
}

func (m *CPUMetrics) Reset()                    { *m = CPUMetrics{} }
func (m *CPUMetrics) String() string            { return proto.CompactTextString(m) }
func (*CPUMetrics) ProtoMessage()               {}
func (*CPUMetrics) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *CPUMetrics) GetUtilization() uint32 {
	if m != nil {
		return m.Utilization
	}
	return 0
}

func (m *CPUMetrics) GetUtilization1Min() uint32 {
	if m != nil {
		return m.Utilization1Min
	}
	return 0
}

func (m *CPUMetrics) GetUtilization5Min() uint32 {
	if m != nil {
		return m.Utilization5Min
	}
	return 0
}

type CPUCore struct {
	Index   uint32      `protobuf:"varint,1,opt,name=index" json:"index"`
	Metrics *CPUMetrics `protobuf:"bytes,2,opt,name=metrics" json:"metrics"`
}

func (m *CPUCore) Reset()                    { *m = CPUCore{} }
func (m *CPUCore) String() string            { return proto.CompactTextString(m) }
func (*CPUCore) ProtoMessage()               {}
func (*CPUCore) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *CPUCore) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CPUCore) GetMetrics() *CPUMetrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type CPULoad struct {
	Core []*CPUCore `protobuf:"bytes,1,rep,name=core" json:"core"`
}

func (m *CPULoad) Reset()                    { *m = CPULoad{} }
func (m *CPULoad) String() string            { return proto.CompactTextString(m) }
func (*CPULoad) ProtoMessage()               {}
func (*CPULoad) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *CPULoad) GetCore() []*CPUCore {
	if m != nil {
		return m.Core
	}
	return nil
}

type MemoryMetrics struct {
	TotalMemory uint64 `protobuf:"varint,1,opt,name=total_memory,json=totalMemory" json:"total_memory"`
	FreeMemory  uint64 `protobuf:"varint,2,opt,name=free_memory,json=freeMemory" json:"free_memory"`
}

func (m *MemoryMetrics) Reset()                    { *m = MemoryMetrics{} }
func (m *MemoryMetrics) String() string            { return proto.CompactTextString(m) }
func (*MemoryMetrics) ProtoMessage()               {}
func (*MemoryMetrics) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *MemoryMetrics) GetTotalMemory() uint64 {
	if m != nil {
		return m.TotalMemory
	}
	return 0
}

func (m *MemoryMetrics) GetFreeMemory() uint64 {
	if m != nil {
		return m.FreeMemory
	}
	return 0
}

type NetworkMetrics struct {
	Sessions uint32 `protobuf:"varint,1,opt,name=sessions" json:"sessions"`
}

func (m *NetworkMetrics) Reset()                    { *m = NetworkMetrics{} }
func (m *NetworkMetrics) String() string            { return proto.CompactTextString(m) }
func (*NetworkMetrics) ProtoMessage()               {}
func (*NetworkMetrics) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *NetworkMetrics) GetSessions() uint32 {
	if m != nil {
		return m.Sessions
	}
	return 0
}

type SystemLoad struct {
	DeviceSn  string                     `protobuf:"bytes,1,opt,name=device_sn,json=deviceSn" json:"device_sn"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp"`
	Cpu       *CPULoad                   `protobuf:"bytes,3,opt,name=cpu" json:"cpu"`
	Memory    *MemoryMetrics             `protobuf:"bytes,4,opt,name=memory" json:"memory"`
	Network   *NetworkMetrics            `protobuf:"bytes,5,opt,name=network" json:"network"`
}

func (m *SystemLoad) Reset()                    { *m = SystemLoad{} }
func (m *SystemLoad) String() string            { return proto.CompactTextString(m) }
func (*SystemLoad) ProtoMessage()               {}
func (*SystemLoad) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *SystemLoad) GetDeviceSn() string {
	if m != nil {
		return m.DeviceSn
	}
	return ""
}

func (m *SystemLoad) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *SystemLoad) GetCpu() *CPULoad {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *SystemLoad) GetMemory() *MemoryMetrics {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *SystemLoad) GetNetwork() *NetworkMetrics {
	if m != nil {
		return m.Network
	}
	return nil
}

func init() {
	proto.RegisterType((*CPUMetrics)(nil), "metrics.CPUMetrics")
	proto.RegisterType((*CPUCore)(nil), "metrics.CPUCore")
	proto.RegisterType((*CPULoad)(nil), "metrics.CPULoad")
	proto.RegisterType((*MemoryMetrics)(nil), "metrics.MemoryMetrics")
	proto.RegisterType((*NetworkMetrics)(nil), "metrics.NetworkMetrics")
	proto.RegisterType((*SystemLoad)(nil), "metrics.SystemLoad")
}

func init() { proto.RegisterFile("cubs_system.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xcb, 0x4f, 0xc2, 0x40,
	0x10, 0xc6, 0x53, 0xde, 0x4c, 0xc5, 0xc7, 0x6a, 0xb4, 0xc1, 0x03, 0xd8, 0x78, 0xe0, 0xa0, 0x25,
	0x60, 0x4c, 0xbc, 0x73, 0x15, 0x42, 0x16, 0x39, 0x93, 0x52, 0x16, 0xb2, 0x91, 0x76, 0x49, 0x77,
	0xab, 0xe2, 0xd1, 0x3f, 0xd7, 0xbf, 0xc2, 0x74, 0xb6, 0x5b, 0x1e, 0x1e, 0xe7, 0xdb, 0xdf, 0xec,
	0xcc, 0x37, 0x1f, 0x5c, 0x04, 0xc9, 0x5c, 0xce, 0xe4, 0x56, 0x2a, 0x16, 0x7a, 0x9b, 0x58, 0x28,
	0x41, 0xaa, 0x21, 0x53, 0x31, 0x0f, 0x64, 0xb3, 0xb5, 0x12, 0x62, 0xb5, 0x66, 0x5d, 0x94, 0xe7,
	0xc9, 0xb2, 0xab, 0x78, 0xc8, 0xa4, 0xf2, 0xc3, 0x8d, 0x26, 0xdd, 0x1f, 0x0b, 0x60, 0x30, 0x9e,
	0x0e, 0x35, 0x4f, 0xda, 0x60, 0x27, 0x8a, 0xaf, 0xf9, 0xb7, 0xaf, 0xb8, 0x88, 0x1c, 0xab, 0x6d,
	0x75, 0x1a, 0x74, 0x5f, 0x22, 0x1d, 0x38, 0xdb, 0x2b, 0x7b, 0x21, 0x8f, 0x9c, 0x02, 0x52, 0xc7,
	0xf2, 0x11, 0xf9, 0x9c, 0x92, 0xc5, 0x7f, 0x64, 0x2a, 0xbb, 0x23, 0xa8, 0x0e, 0xc6, 0xd3, 0x81,
	0x88, 0x19, 0xb9, 0x82, 0x32, 0x8f, 0x16, 0xec, 0x2b, 0x1b, 0xad, 0x0b, 0xf2, 0x08, 0xc6, 0x11,
	0x0e, 0xb3, 0xfb, 0x97, 0x5e, 0x56, 0x7b, 0xbb, 0xe5, 0xa9, 0x61, 0xdc, 0x2e, 0xfe, 0xf7, 0x2a,
	0xfc, 0x05, 0xb9, 0x87, 0x52, 0x20, 0x62, 0xe6, 0x58, 0xed, 0x62, 0xc7, 0xee, 0x9f, 0xef, 0xb7,
	0xa5, 0xf3, 0x28, 0xbe, 0xba, 0x13, 0x68, 0x0c, 0x59, 0x28, 0xe2, 0xad, 0xb9, 0xc3, 0x1d, 0x9c,
	0x28, 0xa1, 0xfc, 0xf5, 0x2c, 0x44, 0x19, 0xb7, 0x29, 0x51, 0x1b, 0x35, 0x4d, 0x92, 0x16, 0xd8,
	0xcb, 0x98, 0x31, 0x43, 0x14, 0x90, 0x80, 0x54, 0xd2, 0x80, 0xfb, 0x00, 0xa7, 0x23, 0xa6, 0x3e,
	0x45, 0xfc, 0x6e, 0x7e, 0x6d, 0x42, 0x4d, 0x32, 0x29, 0xb9, 0x88, 0x64, 0xe6, 0x2f, 0xaf, 0xdd,
	0x5f, 0x0b, 0x60, 0x82, 0x19, 0xe2, 0xde, 0xb7, 0x50, 0x5f, 0xb0, 0x0f, 0x1e, 0xb0, 0x99, 0xd4,
	0x31, 0xd4, 0x69, 0x4d, 0x0b, 0x93, 0x88, 0xbc, 0x40, 0x3d, 0xcf, 0x31, 0x3b, 0x48, 0xd3, 0xd3,
	0x49, 0x7b, 0x26, 0x69, 0xef, 0xcd, 0x10, 0x74, 0x07, 0x13, 0x17, 0x8a, 0xc1, 0x26, 0xc1, 0x1c,
	0x8e, 0xae, 0x91, 0x4e, 0xa5, 0xe9, 0x23, 0xf1, 0xa0, 0x92, 0x79, 0x2a, 0x21, 0x76, 0x9d, 0x63,
	0x07, 0x37, 0xa2, 0x19, 0x45, 0x7a, 0x50, 0x8d, 0xb4, 0x4f, 0xa7, 0x8c, 0x0d, 0x37, 0x79, 0xc3,
	0xa1, 0x7f, 0x6a, 0xb8, 0x79, 0x05, 0xb7, 0x7c, 0xfa, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x63, 0xa4,
	0x40, 0xa8, 0xbb, 0x02, 0x00, 0x00,
}
