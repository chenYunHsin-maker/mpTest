// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cubs_periodical_report.proto

package metrics

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type L4Protocol int32

const (
	L4Protocol_OTHER L4Protocol = 0
	L4Protocol_ICMP  L4Protocol = 1
	L4Protocol_TCP   L4Protocol = 6
	L4Protocol_UDP   L4Protocol = 17
)

var L4Protocol_name = map[int32]string{
	0:  "OTHER",
	1:  "ICMP",
	6:  "TCP",
	17: "UDP",
}
var L4Protocol_value = map[string]int32{
	"OTHER": 0,
	"ICMP":  1,
	"TCP":   6,
	"UDP":   17,
}

func (x L4Protocol) String() string {
	return proto.EnumName(L4Protocol_name, int32(x))
}
func (L4Protocol) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

type QosLevel int32

const (
	QosLevel_CONTROL QosLevel = 0
	QosLevel_LOW     QosLevel = 1
	QosLevel_NORMAL  QosLevel = 2
	QosLevel_HIGH    QosLevel = 3
)

var QosLevel_name = map[int32]string{
	0: "CONTROL",
	1: "LOW",
	2: "NORMAL",
	3: "HIGH",
}
var QosLevel_value = map[string]int32{
	"CONTROL": 0,
	"LOW":     1,
	"NORMAL":  2,
	"HIGH":    3,
}

func (x QosLevel) String() string {
	return proto.EnumName(QosLevel_name, int32(x))
}
func (QosLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

type Status int32

const (
	Status_CREATED Status = 0
	Status_DESTROY Status = 1
	Status_UPDATE  Status = 2
)

var Status_name = map[int32]string{
	0: "CREATED",
	1: "DESTROY",
	2: "UPDATE",
}
var Status_value = map[string]int32{
	"CREATED": 0,
	"DESTROY": 1,
	"UPDATE":  2,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

type TrafficMetrics struct {
	// @inject_tag: labelnames:"interface" help:"traffic metrics on each interface per-connection"
	TxPackets uint64 `protobuf:"varint,1,opt,name=tx_packets,json=txPackets" json:"tx_packets" labelnames:"interface" help:"traffic metrics on each interface per-connection"`
	TxOctets  uint64 `protobuf:"varint,2,opt,name=tx_octets,json=txOctets" json:"tx_octets"`
	RxPackets uint64 `protobuf:"varint,3,opt,name=rx_packets,json=rxPackets" json:"rx_packets"`
	RxOctets  uint64 `protobuf:"varint,4,opt,name=rx_octets,json=rxOctets" json:"rx_octets"`
}

func (m *TrafficMetrics) Reset()                    { *m = TrafficMetrics{} }
func (m *TrafficMetrics) String() string            { return proto.CompactTextString(m) }
func (*TrafficMetrics) ProtoMessage()               {}
func (*TrafficMetrics) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *TrafficMetrics) GetTxPackets() uint64 {
	if m != nil {
		return m.TxPackets
	}
	return 0
}

func (m *TrafficMetrics) GetTxOctets() uint64 {
	if m != nil {
		return m.TxOctets
	}
	return 0
}

func (m *TrafficMetrics) GetRxPackets() uint64 {
	if m != nil {
		return m.RxPackets
	}
	return 0
}

func (m *TrafficMetrics) GetRxOctets() uint64 {
	if m != nil {
		return m.RxOctets
	}
	return 0
}

type TrafficVolume struct {
	// @inject_tag: label:"interface=?" help:"which interface are packets transmitted/received from"
	Interface string          `protobuf:"bytes,1,opt,name=interface" json:"interface" label:"interface=?" help:"which interface are packets transmitted/received from"`
	Metrics   *TrafficMetrics `protobuf:"bytes,2,opt,name=metrics" json:"metrics"`
}

func (m *TrafficVolume) Reset()                    { *m = TrafficVolume{} }
func (m *TrafficVolume) String() string            { return proto.CompactTextString(m) }
func (*TrafficVolume) ProtoMessage()               {}
func (*TrafficVolume) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *TrafficVolume) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *TrafficVolume) GetMetrics() *TrafficMetrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type TrafficTuple struct {
	ClientIp              []byte           `protobuf:"bytes,1,opt,name=client_ip,json=clientIp,proto3" json:"client_ip"`
	ClientPort            uint32           `protobuf:"varint,2,opt,name=client_port,json=clientPort" json:"client_port"`
	Proto                 L4Protocol       `protobuf:"varint,3,opt,name=proto,enum=metrics.L4Protocol" json:"proto"`
	RemoteIp              []byte           `protobuf:"bytes,4,opt,name=remote_ip,json=remoteIp,proto3" json:"remote_ip"`
	RemotePort            uint32           `protobuf:"varint,5,opt,name=remote_port,json=remotePort" json:"remote_port"`
	EstablishAt           int64            `protobuf:"varint,6,opt,name=establish_at,json=establishAt" json:"establish_at"`
	ReportAt              int64            `protobuf:"varint,7,opt,name=report_at,json=reportAt" json:"report_at"`
	Application           uint32           `protobuf:"varint,8,opt,name=application" json:"application"`
	ClientHostname        string           `protobuf:"bytes,9,opt,name=client_hostname,json=clientHostname" json:"client_hostname"`
	ClientUsername        string           `protobuf:"bytes,10,opt,name=client_username,json=clientUsername" json:"client_username"`
	ClientOperatingSystem string           `protobuf:"bytes,11,opt,name=client_operating_system,json=clientOperatingSystem" json:"client_operating_system"`
	Qos                   QosLevel         `protobuf:"varint,12,opt,name=qos,enum=metrics.QosLevel" json:"qos"`
	Status                Status           `protobuf:"varint,13,opt,name=status,enum=metrics.Status" json:"status"`
	TrafficVolume         []*TrafficVolume `protobuf:"bytes,14,rep,name=traffic_volume,json=trafficVolume" json:"traffic_volume"`
	MacAddress            []byte           `protobuf:"bytes,15,opt,name=mac_address,json=macAddress,proto3" json:"mac_address"`
	Magic                 uint64           `protobuf:"varint,16,opt,name=magic" json:"magic"`
	Icmpid                uint32           `protobuf:"varint,17,opt,name=icmpid" json:"icmpid"`
}

func (m *TrafficTuple) Reset()                    { *m = TrafficTuple{} }
func (m *TrafficTuple) String() string            { return proto.CompactTextString(m) }
func (*TrafficTuple) ProtoMessage()               {}
func (*TrafficTuple) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *TrafficTuple) GetClientIp() []byte {
	if m != nil {
		return m.ClientIp
	}
	return nil
}

func (m *TrafficTuple) GetClientPort() uint32 {
	if m != nil {
		return m.ClientPort
	}
	return 0
}

func (m *TrafficTuple) GetProto() L4Protocol {
	if m != nil {
		return m.Proto
	}
	return L4Protocol_OTHER
}

func (m *TrafficTuple) GetRemoteIp() []byte {
	if m != nil {
		return m.RemoteIp
	}
	return nil
}

func (m *TrafficTuple) GetRemotePort() uint32 {
	if m != nil {
		return m.RemotePort
	}
	return 0
}

func (m *TrafficTuple) GetEstablishAt() int64 {
	if m != nil {
		return m.EstablishAt
	}
	return 0
}

func (m *TrafficTuple) GetReportAt() int64 {
	if m != nil {
		return m.ReportAt
	}
	return 0
}

func (m *TrafficTuple) GetApplication() uint32 {
	if m != nil {
		return m.Application
	}
	return 0
}

func (m *TrafficTuple) GetClientHostname() string {
	if m != nil {
		return m.ClientHostname
	}
	return ""
}

func (m *TrafficTuple) GetClientUsername() string {
	if m != nil {
		return m.ClientUsername
	}
	return ""
}

func (m *TrafficTuple) GetClientOperatingSystem() string {
	if m != nil {
		return m.ClientOperatingSystem
	}
	return ""
}

func (m *TrafficTuple) GetQos() QosLevel {
	if m != nil {
		return m.Qos
	}
	return QosLevel_CONTROL
}

func (m *TrafficTuple) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_CREATED
}

func (m *TrafficTuple) GetTrafficVolume() []*TrafficVolume {
	if m != nil {
		return m.TrafficVolume
	}
	return nil
}

func (m *TrafficTuple) GetMacAddress() []byte {
	if m != nil {
		return m.MacAddress
	}
	return nil
}

func (m *TrafficTuple) GetMagic() uint64 {
	if m != nil {
		return m.Magic
	}
	return 0
}

func (m *TrafficTuple) GetIcmpid() uint32 {
	if m != nil {
		return m.Icmpid
	}
	return 0
}

type AccumulatedTraffic struct {
	DeviceSn     string                     `protobuf:"bytes,1,opt,name=device_sn,json=deviceSn" json:"device_sn"`
	TrafficTuple []*TrafficTuple            `protobuf:"bytes,2,rep,name=traffic_tuple,json=trafficTuple" json:"traffic_tuple"`
	Timestamp    *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp"`
}

func (m *AccumulatedTraffic) Reset()                    { *m = AccumulatedTraffic{} }
func (m *AccumulatedTraffic) String() string            { return proto.CompactTextString(m) }
func (*AccumulatedTraffic) ProtoMessage()               {}
func (*AccumulatedTraffic) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *AccumulatedTraffic) GetDeviceSn() string {
	if m != nil {
		return m.DeviceSn
	}
	return ""
}

func (m *AccumulatedTraffic) GetTrafficTuple() []*TrafficTuple {
	if m != nil {
		return m.TrafficTuple
	}
	return nil
}

func (m *AccumulatedTraffic) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type DeltaTraffic struct {
	TrafficTuple []*TrafficTuple `protobuf:"bytes,1,rep,name=traffic_tuple,json=trafficTuple" json:"traffic_tuple"`
}

func (m *DeltaTraffic) Reset()                    { *m = DeltaTraffic{} }
func (m *DeltaTraffic) String() string            { return proto.CompactTextString(m) }
func (*DeltaTraffic) ProtoMessage()               {}
func (*DeltaTraffic) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *DeltaTraffic) GetTrafficTuple() []*TrafficTuple {
	if m != nil {
		return m.TrafficTuple
	}
	return nil
}

type FlowTrafficInfo struct {
	DeviceSn           string                     `protobuf:"bytes,1,opt,name=device_sn,json=deviceSn" json:"device_sn"`
	Timestamp          *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp"`
	AccumulatedTraffic *AccumulatedTraffic        `protobuf:"bytes,3,opt,name=AccumulatedTraffic" json:"AccumulatedTraffic"`
	DeltaTraffic       *DeltaTraffic              `protobuf:"bytes,4,opt,name=DeltaTraffic" json:"DeltaTraffic"`
}

func (m *FlowTrafficInfo) Reset()                    { *m = FlowTrafficInfo{} }
func (m *FlowTrafficInfo) String() string            { return proto.CompactTextString(m) }
func (*FlowTrafficInfo) ProtoMessage()               {}
func (*FlowTrafficInfo) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *FlowTrafficInfo) GetDeviceSn() string {
	if m != nil {
		return m.DeviceSn
	}
	return ""
}

func (m *FlowTrafficInfo) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *FlowTrafficInfo) GetAccumulatedTraffic() *AccumulatedTraffic {
	if m != nil {
		return m.AccumulatedTraffic
	}
	return nil
}

func (m *FlowTrafficInfo) GetDeltaTraffic() *DeltaTraffic {
	if m != nil {
		return m.DeltaTraffic
	}
	return nil
}

func init() {
	proto.RegisterType((*TrafficMetrics)(nil), "metrics.TrafficMetrics")
	proto.RegisterType((*TrafficVolume)(nil), "metrics.TrafficVolume")
	proto.RegisterType((*TrafficTuple)(nil), "metrics.TrafficTuple")
	proto.RegisterType((*AccumulatedTraffic)(nil), "metrics.AccumulatedTraffic")
	proto.RegisterType((*DeltaTraffic)(nil), "metrics.DeltaTraffic")
	proto.RegisterType((*FlowTrafficInfo)(nil), "metrics.FlowTrafficInfo")
	proto.RegisterEnum("metrics.L4Protocol", L4Protocol_name, L4Protocol_value)
	proto.RegisterEnum("metrics.QosLevel", QosLevel_name, QosLevel_value)
	proto.RegisterEnum("metrics.Status", Status_name, Status_value)
}

func init() { proto.RegisterFile("cubs_periodical_report.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 793 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x5d, 0x73, 0xdb, 0x44,
	0x14, 0x8d, 0x6c, 0xc7, 0xb1, 0xaf, 0x1c, 0x47, 0x59, 0x68, 0xab, 0x69, 0xcb, 0x24, 0x98, 0x87,
	0x86, 0x3c, 0xb8, 0x43, 0xca, 0x74, 0x80, 0x19, 0x1e, 0x3c, 0xb1, 0x21, 0x01, 0xa7, 0x32, 0x1b,
	0x05, 0x86, 0x27, 0xb1, 0x59, 0xaf, 0xd3, 0x1d, 0x24, 0xad, 0xd0, 0xae, 0x82, 0xf9, 0x07, 0xfc,
	0x13, 0xfe, 0x1e, 0x7f, 0x80, 0x19, 0x66, 0x3f, 0xe4, 0x8f, 0xb6, 0xc3, 0xd0, 0x37, 0xef, 0x39,
	0xe7, 0xfa, 0xdc, 0x7b, 0xf7, 0x68, 0xe1, 0x29, 0xad, 0x6e, 0x65, 0x52, 0xb0, 0x92, 0x8b, 0x39,
	0xa7, 0x24, 0x4d, 0x4a, 0x56, 0x88, 0x52, 0x0d, 0x8b, 0x52, 0x28, 0x81, 0xf6, 0x32, 0xa6, 0x4a,
	0x4e, 0xe5, 0xe3, 0xa3, 0x3b, 0x21, 0xee, 0x52, 0xf6, 0xdc, 0xc0, 0xb7, 0xd5, 0xe2, 0xb9, 0xe2,
	0x19, 0x93, 0x8a, 0x64, 0x85, 0x55, 0x0e, 0xfe, 0xf4, 0xa0, 0x1f, 0x97, 0x64, 0xb1, 0xe0, 0xf4,
	0xca, 0xd6, 0xa0, 0x8f, 0x00, 0xd4, 0x32, 0x29, 0x08, 0xfd, 0x95, 0x29, 0x19, 0x7a, 0xc7, 0xde,
	0x49, 0x0b, 0x77, 0xd5, 0x72, 0x66, 0x01, 0xf4, 0x04, 0xba, 0x6a, 0x99, 0x08, 0xaa, 0x34, 0xdb,
	0x30, 0x6c, 0x47, 0x2d, 0x23, 0x73, 0xd6, 0xb5, 0xe5, 0xba, 0xb6, 0x69, 0x6b, 0xcb, 0xcd, 0xda,
	0x72, 0x55, 0xdb, 0xb2, 0xb5, 0xa5, 0xab, 0x1d, 0xfc, 0x02, 0xfb, 0xae, 0x93, 0x1f, 0x45, 0x5a,
	0x65, 0x0c, 0x3d, 0x85, 0x2e, 0xcf, 0x15, 0x2b, 0x17, 0x84, 0x32, 0xd3, 0x47, 0x17, 0xaf, 0x01,
	0xf4, 0x19, 0xd4, 0x53, 0x9a, 0x2e, 0xfc, 0xb3, 0x47, 0x43, 0x77, 0x1e, 0x6e, 0x0f, 0x84, 0x6b,
	0xdd, 0xe0, 0x9f, 0x16, 0xf4, 0x1c, 0x17, 0x57, 0x45, 0xca, 0x74, 0x3f, 0x34, 0xe5, 0x2c, 0x57,
	0x09, 0x2f, 0x8c, 0x43, 0x0f, 0x77, 0x2c, 0x70, 0x59, 0xa0, 0x23, 0xf0, 0x1d, 0xa9, 0x37, 0x6b,
	0x4c, 0xf6, 0x31, 0x58, 0x68, 0x26, 0x4a, 0x85, 0x3e, 0x85, 0x5d, 0xb3, 0x44, 0x33, 0x67, 0xff,
	0xec, 0x83, 0x95, 0xff, 0xf4, 0xf3, 0x99, 0xc6, 0xa9, 0x48, 0xb1, 0x55, 0x98, 0xc1, 0x59, 0x26,
	0x14, 0xd3, 0x46, 0x2d, 0x6b, 0x64, 0x01, 0x6b, 0xe4, 0x48, 0x63, 0xb4, 0x6b, 0x8d, 0x2c, 0x64,
	0x8c, 0x3e, 0x86, 0x9e, 0xbe, 0xb4, 0xdb, 0x94, 0xcb, 0xd7, 0x09, 0x51, 0x61, 0xfb, 0xd8, 0x3b,
	0x69, 0x62, 0x7f, 0x85, 0x8d, 0x94, 0x35, 0xd0, 0xe5, 0x9a, 0xdf, 0x33, 0x7c, 0xc7, 0x02, 0x23,
	0x85, 0x8e, 0xc1, 0x27, 0x45, 0x91, 0x72, 0x4a, 0x14, 0x17, 0x79, 0xd8, 0x31, 0x06, 0x9b, 0x10,
	0x7a, 0x06, 0x07, 0x6e, 0xd6, 0xd7, 0x42, 0xaa, 0x9c, 0x64, 0x2c, 0xec, 0x9a, 0x85, 0xf7, 0x2d,
	0x7c, 0xe1, 0xd0, 0x0d, 0x61, 0x25, 0x59, 0x69, 0x84, 0xb0, 0x29, 0xbc, 0x71, 0x28, 0x7a, 0x09,
	0x8f, 0x9c, 0x50, 0x14, 0xac, 0x24, 0x8a, 0xe7, 0x77, 0x89, 0xfc, 0x43, 0x2a, 0x96, 0x85, 0xbe,
	0x29, 0x78, 0x60, 0xe9, 0xa8, 0x66, 0xaf, 0x0d, 0x89, 0x3e, 0x81, 0xe6, 0x6f, 0x42, 0x86, 0x3d,
	0xb3, 0xd2, 0xc3, 0xd5, 0x4a, 0x7f, 0x10, 0x72, 0xca, 0xee, 0x59, 0x8a, 0x35, 0x8b, 0x9e, 0x41,
	0x5b, 0x2a, 0xa2, 0x2a, 0x19, 0xee, 0x1b, 0xdd, 0xc1, 0x4a, 0x77, 0x6d, 0x60, 0xec, 0x68, 0xf4,
	0x35, 0xf4, 0x95, 0xbd, 0xf0, 0xe4, 0xde, 0x84, 0x2a, 0xec, 0x1f, 0x37, 0x4f, 0xfc, 0xb3, 0x87,
	0x6f, 0x66, 0xc5, 0x46, 0x0e, 0xef, 0xab, 0xad, 0x04, 0x1e, 0x81, 0x9f, 0x11, 0x9a, 0x90, 0xf9,
	0xbc, 0x64, 0x52, 0x86, 0x07, 0xe6, 0xe2, 0x20, 0x23, 0x74, 0x64, 0x11, 0xf4, 0x21, 0xec, 0x66,
	0xe4, 0x8e, 0xd3, 0x30, 0x30, 0x61, 0xb6, 0x07, 0xf4, 0x10, 0xda, 0x9c, 0x66, 0x05, 0x9f, 0x87,
	0x87, 0x66, 0xd5, 0xee, 0x34, 0xf8, 0xcb, 0x03, 0x34, 0xa2, 0xb4, 0xca, 0xaa, 0x94, 0x28, 0x36,
	0x77, 0xd6, 0xfa, 0xee, 0xe6, 0xec, 0x9e, 0x53, 0x96, 0xc8, 0xdc, 0xe5, 0xbc, 0x63, 0x81, 0xeb,
	0x1c, 0x7d, 0x05, 0x75, 0x4f, 0x89, 0xd2, 0x99, 0x0d, 0x1b, 0x66, 0x80, 0x07, 0x6f, 0x0e, 0x60,
	0x02, 0x8d, 0x7b, 0x6a, 0x33, 0xde, 0x5f, 0x40, 0x77, 0xf5, 0xbd, 0x9b, 0x90, 0xfa, 0x67, 0x8f,
	0x87, 0xf6, 0x45, 0x18, 0xd6, 0x2f, 0xc2, 0x30, 0xae, 0x15, 0x78, 0x2d, 0x1e, 0x7c, 0x07, 0xbd,
	0x31, 0x4b, 0x15, 0xa9, 0x5b, 0x7c, 0xab, 0x0b, 0xef, 0x7f, 0x77, 0x31, 0xf8, 0xdb, 0x83, 0x83,
	0x6f, 0x52, 0xf1, 0xbb, 0x93, 0x5c, 0xe6, 0x0b, 0xf1, 0xdf, 0x23, 0x6f, 0xb5, 0xdd, 0x78, 0x8f,
	0xb6, 0xd1, 0xf7, 0xef, 0xda, 0xaf, 0x9b, 0xfc, 0xc9, 0xaa, 0xd7, 0xb7, 0x25, 0xf8, 0x5d, 0xd7,
	0xf2, 0xe5, 0xf6, 0x0e, 0xcc, 0x67, 0xbb, 0x39, 0xf2, 0x26, 0x89, 0xb7, 0xa4, 0xa7, 0x2f, 0x00,
	0xd6, 0x6f, 0x00, 0xea, 0xc2, 0x6e, 0x14, 0x5f, 0x4c, 0x70, 0xb0, 0x83, 0x3a, 0xd0, 0xba, 0x3c,
	0xbf, 0x9a, 0x05, 0x1e, 0xda, 0x83, 0x66, 0x7c, 0x3e, 0x0b, 0xda, 0xfa, 0xc7, 0xcd, 0x78, 0x16,
	0x1c, 0x9e, 0xbe, 0x84, 0x4e, 0x9d, 0x72, 0xe4, 0xc3, 0xde, 0x79, 0xf4, 0x2a, 0xc6, 0xd1, 0x34,
	0xd8, 0xd1, 0x8a, 0x69, 0xf4, 0x53, 0xe0, 0x21, 0x80, 0xf6, 0xab, 0x08, 0x5f, 0x8d, 0xa6, 0x41,
	0x43, 0xff, 0xd3, 0xc5, 0xe5, 0xb7, 0x17, 0x41, 0xf3, 0x74, 0x08, 0x6d, 0x9b, 0x7a, 0x53, 0x85,
	0x27, 0xa3, 0x78, 0x32, 0x0e, 0x76, 0xf4, 0x61, 0x3c, 0xb9, 0x8e, 0x71, 0xf4, 0xb3, 0xad, 0xbc,
	0x99, 0x8d, 0x47, 0xf1, 0x24, 0x68, 0xdc, 0xb6, 0xcd, 0x0e, 0x5f, 0xfc, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0x31, 0x99, 0x6e, 0xe9, 0x43, 0x06, 0x00, 0x00,
}
