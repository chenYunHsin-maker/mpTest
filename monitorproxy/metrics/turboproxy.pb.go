// Code generated by protoc-gen-go. DO NOT EDIT.
// source: turboproxy.proto

package metrics

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// SCTPStat contains all SCTP statistics
type SCTPStat struct {
	// The input statistics
	// @inject_tag: label:"type=input"
	InputMetrics *SCTPInputMetrics `protobuf:"bytes,1,opt,name=input_metrics,json=inputMetrics" json:"input_metrics" label:"type=input"`
	// The output statistics
	// @inject_tag: label:"type=output"
	OutputMetrics *SCTPOutputMetrics `protobuf:"bytes,2,opt,name=output_metrics,json=outputMetrics" json:"output_metrics" label:"type=output"`
	// The congestion control information
	// @inject_tag: label:"type=congestion"
	CongestionMetrics *SCTPCongestionMetrics `protobuf:"bytes,3,opt,name=congestion_metrics,json=congestionMetrics" json:"congestion_metrics" label:"type=congestion"`
	// The packet drop statistics
	// @inject_tag: label:"type=drop"
	DropMetrics *SCTPDropMetrics `protobuf:"bytes,4,opt,name=drop_metrics,json=dropMetrics" json:"drop_metrics" label:"type=drop"`
	// The timeout statistics
	// @inject_tag: label:"type=timeout"
	TimeoutMetrics *SCTPTimeoutMetrics `protobuf:"bytes,5,opt,name=timeout_metrics,json=timeoutMetrics" json:"timeout_metrics" label:"type=timeout"`
	// The other statistics
	// @inject_tag: label:"type=other"
	OtherMetrics *SCTPOtherMetrics `protobuf:"bytes,6,opt,name=other_metrics,json=otherMetrics" json:"other_metrics" label:"type=other"`
}

func (m *SCTPStat) Reset()                    { *m = SCTPStat{} }
func (m *SCTPStat) String() string            { return proto.CompactTextString(m) }
func (*SCTPStat) ProtoMessage()               {}
func (*SCTPStat) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *SCTPStat) GetInputMetrics() *SCTPInputMetrics {
	if m != nil {
		return m.InputMetrics
	}
	return nil
}

func (m *SCTPStat) GetOutputMetrics() *SCTPOutputMetrics {
	if m != nil {
		return m.OutputMetrics
	}
	return nil
}

func (m *SCTPStat) GetCongestionMetrics() *SCTPCongestionMetrics {
	if m != nil {
		return m.CongestionMetrics
	}
	return nil
}

func (m *SCTPStat) GetDropMetrics() *SCTPDropMetrics {
	if m != nil {
		return m.DropMetrics
	}
	return nil
}

func (m *SCTPStat) GetTimeoutMetrics() *SCTPTimeoutMetrics {
	if m != nil {
		return m.TimeoutMetrics
	}
	return nil
}

func (m *SCTPStat) GetOtherMetrics() *SCTPOtherMetrics {
	if m != nil {
		return m.OtherMetrics
	}
	return nil
}

// SCTPInputMetrics contains input statistics
type SCTPInputMetrics struct {
	// @inject_tag: help:"total input packets"
	Recvpackets uint32 `protobuf:"varint,1,opt,name=recvpackets" json:"recvpackets" help:"total input packets"`
	// @inject_tag: help:"total input datagrams"
	Recvdatagrams uint32 `protobuf:"varint,2,opt,name=recvdatagrams" json:"recvdatagrams" help:"total input datagrams"`
	// @inject_tag: help:"total packets that had data"
	Recvpktwithdata uint32 `protobuf:"varint,3,opt,name=recvpktwithdata" json:"recvpktwithdata" help:"total packets that had data"`
	// @inject_tag: help:"total input SACK chunks"
	Recvsacks uint32 `protobuf:"varint,4,opt,name=recvsacks" json:"recvsacks" help:"total input SACK chunks"`
	// @inject_tag: help:"total input DATA chunks"
	Recvdata uint32 `protobuf:"varint,5,opt,name=recvdata" json:"recvdata" help:"total input DATA chunks"`
	// @inject_tag: help:"total input duplicate DATA chunks"
	Recvdupdata uint32 `protobuf:"varint,6,opt,name=recvdupdata" json:"recvdupdata" help:"total input duplicate DATA chunks"`
	// @inject_tag: help:"total input HB chunks"
	Recvheartbeat uint32 `protobuf:"varint,7,opt,name=recvheartbeat" json:"recvheartbeat" help:"total input HB chunks"`
	// @inject_tag: help:"total input HB-ACK chunks"
	Recvheartbeatack uint32 `protobuf:"varint,8,opt,name=recvheartbeatack" json:"recvheartbeatack" help:"total input HB-ACK chunks"`
	// @inject_tag: help:"total input ECNE chunks"
	Recvecne uint32 `protobuf:"varint,9,opt,name=recvecne" json:"recvecne" help:"total input ECNE chunks"`
	// @inject_tag: help:"total input AUTH chunks"
	Recvauth uint32 `protobuf:"varint,10,opt,name=recvauth" json:"recvauth" help:"total input AUTH chunks"`
	// @inject_tag: help:"total input chunks missing AUTH"
	Recvauthmissing uint32 `protobuf:"varint,11,opt,name=recvauthmissing" json:"recvauthmissing" help:"total input chunks missing AUTH"`
	// @inject_tag: help:"total number of invalid HMAC ids received"
	Recvivalhmacid uint32 `protobuf:"varint,12,opt,name=recvivalhmacid" json:"recvivalhmacid" help:"total number of invalid HMAC ids received"`
	// @inject_tag: help:"total number of invalid secret ids received"
	Recvivalkeyid uint32 `protobuf:"varint,13,opt,name=recvivalkeyid" json:"recvivalkeyid" help:"total number of invalid secret ids received"`
	// @inject_tag: help:"total number of auth failed"
	Recvauthfailed uint32 `protobuf:"varint,14,opt,name=recvauthfailed" json:"recvauthfailed" help:"total number of auth failed"`
	// @inject_tag: help:"total fast path receives all one chunk"
	Recvexpress uint32 `protobuf:"varint,15,opt,name=recvexpress" json:"recvexpress" help:"total fast path receives all one chunk"`
	// @inject_tag: help:"total fast path multi-part data"
	Recvexpressm uint32 `protobuf:"varint,16,opt,name=recvexpressm" json:"recvexpressm" help:"total fast path multi-part data"`
	// @inject_tag: help:"max receive TSN sequence number"
	Recvtsn uint32 `protobuf:"varint,17,opt,name=recvtsn" json:"recvtsn" help:"max receive TSN sequence number"`
}

func (m *SCTPInputMetrics) Reset()                    { *m = SCTPInputMetrics{} }
func (m *SCTPInputMetrics) String() string            { return proto.CompactTextString(m) }
func (*SCTPInputMetrics) ProtoMessage()               {}
func (*SCTPInputMetrics) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *SCTPInputMetrics) GetRecvpackets() uint32 {
	if m != nil {
		return m.Recvpackets
	}
	return 0
}

func (m *SCTPInputMetrics) GetRecvdatagrams() uint32 {
	if m != nil {
		return m.Recvdatagrams
	}
	return 0
}

func (m *SCTPInputMetrics) GetRecvpktwithdata() uint32 {
	if m != nil {
		return m.Recvpktwithdata
	}
	return 0
}

func (m *SCTPInputMetrics) GetRecvsacks() uint32 {
	if m != nil {
		return m.Recvsacks
	}
	return 0
}

func (m *SCTPInputMetrics) GetRecvdata() uint32 {
	if m != nil {
		return m.Recvdata
	}
	return 0
}

func (m *SCTPInputMetrics) GetRecvdupdata() uint32 {
	if m != nil {
		return m.Recvdupdata
	}
	return 0
}

func (m *SCTPInputMetrics) GetRecvheartbeat() uint32 {
	if m != nil {
		return m.Recvheartbeat
	}
	return 0
}

func (m *SCTPInputMetrics) GetRecvheartbeatack() uint32 {
	if m != nil {
		return m.Recvheartbeatack
	}
	return 0
}

func (m *SCTPInputMetrics) GetRecvecne() uint32 {
	if m != nil {
		return m.Recvecne
	}
	return 0
}

func (m *SCTPInputMetrics) GetRecvauth() uint32 {
	if m != nil {
		return m.Recvauth
	}
	return 0
}

func (m *SCTPInputMetrics) GetRecvauthmissing() uint32 {
	if m != nil {
		return m.Recvauthmissing
	}
	return 0
}

func (m *SCTPInputMetrics) GetRecvivalhmacid() uint32 {
	if m != nil {
		return m.Recvivalhmacid
	}
	return 0
}

func (m *SCTPInputMetrics) GetRecvivalkeyid() uint32 {
	if m != nil {
		return m.Recvivalkeyid
	}
	return 0
}

func (m *SCTPInputMetrics) GetRecvauthfailed() uint32 {
	if m != nil {
		return m.Recvauthfailed
	}
	return 0
}

func (m *SCTPInputMetrics) GetRecvexpress() uint32 {
	if m != nil {
		return m.Recvexpress
	}
	return 0
}

func (m *SCTPInputMetrics) GetRecvexpressm() uint32 {
	if m != nil {
		return m.Recvexpressm
	}
	return 0
}

func (m *SCTPInputMetrics) GetRecvtsn() uint32 {
	if m != nil {
		return m.Recvtsn
	}
	return 0
}

// SCTPOutputMetrics contains output statistics
type SCTPOutputMetrics struct {
	// @inject_tag: help:"total output packets"
	Sendpackets uint32 `protobuf:"varint,1,opt,name=sendpackets" json:"sendpackets" help:"total output packets"`
	// @inject_tag: help:"total output SACKs"
	Sendsacks uint32 `protobuf:"varint,2,opt,name=sendsacks" json:"sendsacks" help:"total output SACKs"`
	// @inject_tag: help:"total output DATA chunks"
	Senddata uint32 `protobuf:"varint,3,opt,name=senddata" json:"senddata" help:"total output DATA chunks"`
	// @inject_tag: help:"total output retransmitted DATA chunks"
	Sendretransdata uint32 `protobuf:"varint,4,opt,name=sendretransdata" json:"sendretransdata" help:"total output retransmitted DATA chunks"`
	// @inject_tag: help:"total output fast retransmitted DATA chunks"
	Sendfastretrans uint32 `protobuf:"varint,5,opt,name=sendfastretrans" json:"sendfastretrans" help:"total output fast retransmitted DATA chunks"`
	// @inject_tag: help:"total FR's that happened more than once to same chunk (u-del multi-fralgo)."
	Sendmultfastretrans uint32 `protobuf:"varint,6,opt,name=sendmultfastretrans" json:"sendmultfastretrans" help:"total FR's that happened more than once to same chunk (u-del multi-fralgo)."`
	// @inject_tag: help:"total output HB chunks"
	Sendheartbeat uint32 `protobuf:"varint,7,opt,name=sendheartbeat" json:"sendheartbeat" help:"total output HB chunks"`
	// @inject_tag: help:"total output ECNE chunks"
	Sendecne uint32 `protobuf:"varint,8,opt,name=sendecne" json:"sendecne" help:"total output ECNE chunks"`
	// @inject_tag: help:"total output AUTH chunks FIXME"
	Sendauth uint32 `protobuf:"varint,9,opt,name=sendauth" json:"sendauth" help:"total output AUTH chunks FIXME"`
	// @inject_tag: help:"ip_output error counter"
	Senderrors uint32 `protobuf:"varint,10,opt,name=senderrors" json:"senderrors" help:"ip_output error counter"`
	// @inject_tag: help:"max send BSN sequence number"
	Sendbsn uint32 `protobuf:"varint,11,opt,name=sendbsn" json:"sendbsn" help:"max send BSN sequence number"`
	// @inject_tag: help:"max send TSN sequence number"
	Sendtsn uint32 `protobuf:"varint,12,opt,name=sendtsn" json:"sendtsn" help:"max send TSN sequence number"`
}

func (m *SCTPOutputMetrics) Reset()                    { *m = SCTPOutputMetrics{} }
func (m *SCTPOutputMetrics) String() string            { return proto.CompactTextString(m) }
func (*SCTPOutputMetrics) ProtoMessage()               {}
func (*SCTPOutputMetrics) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *SCTPOutputMetrics) GetSendpackets() uint32 {
	if m != nil {
		return m.Sendpackets
	}
	return 0
}

func (m *SCTPOutputMetrics) GetSendsacks() uint32 {
	if m != nil {
		return m.Sendsacks
	}
	return 0
}

func (m *SCTPOutputMetrics) GetSenddata() uint32 {
	if m != nil {
		return m.Senddata
	}
	return 0
}

func (m *SCTPOutputMetrics) GetSendretransdata() uint32 {
	if m != nil {
		return m.Sendretransdata
	}
	return 0
}

func (m *SCTPOutputMetrics) GetSendfastretrans() uint32 {
	if m != nil {
		return m.Sendfastretrans
	}
	return 0
}

func (m *SCTPOutputMetrics) GetSendmultfastretrans() uint32 {
	if m != nil {
		return m.Sendmultfastretrans
	}
	return 0
}

func (m *SCTPOutputMetrics) GetSendheartbeat() uint32 {
	if m != nil {
		return m.Sendheartbeat
	}
	return 0
}

func (m *SCTPOutputMetrics) GetSendecne() uint32 {
	if m != nil {
		return m.Sendecne
	}
	return 0
}

func (m *SCTPOutputMetrics) GetSendauth() uint32 {
	if m != nil {
		return m.Sendauth
	}
	return 0
}

func (m *SCTPOutputMetrics) GetSenderrors() uint32 {
	if m != nil {
		return m.Senderrors
	}
	return 0
}

func (m *SCTPOutputMetrics) GetSendbsn() uint32 {
	if m != nil {
		return m.Sendbsn
	}
	return 0
}

func (m *SCTPOutputMetrics) GetSendtsn() uint32 {
	if m != nil {
		return m.Sendtsn
	}
	return 0
}

// SCTPCongestionMetrics contains congestion control information
type SCTPCongestionMetrics struct {
	// @inject_tag: help:"sent_queue count"
	Ccsentqueuecnt uint32 `protobuf:"varint,1,opt,name=ccsentqueuecnt" json:"ccsentqueuecnt" help:"sent_queue count"`
	// @inject_tag: help:"send_queue count"
	Ccsendqueuecnt uint32 `protobuf:"varint,2,opt,name=ccsendqueuecnt" json:"ccsendqueuecnt" help:"send_queue count"`
	// @inject_tag: help:"pacing rate"
	Ccsendpacingrate uint32 `protobuf:"varint,3,opt,name=ccsendpacingrate" json:"ccsendpacingrate" help:"pacing rate"`
	// @inject_tag: help:"measure bandwidth"
	Ccmeasurebw uint32 `protobuf:"varint,4,opt,name=ccmeasurebw" json:"ccmeasurebw" help:"measure bandwidth"`
	// @inject_tag: help:"inflight packets"
	Ccinflightpkts uint32 `protobuf:"varint,5,opt,name=ccinflightpkts" json:"ccinflightpkts" help:"inflight packets"`
	// @inject_tag: help:"inflight size"
	Ccinflightsize uint32 `protobuf:"varint,6,opt,name=ccinflightsize" json:"ccinflightsize" help:"inflight size"`
	// @inject_tag: help:"congestion window"
	Cccwnd uint32 `protobuf:"varint,7,opt,name=cccwnd" json:"cccwnd" help:"congestion window"`
	// @inject_tag: help:"minimal rtt in us"
	Ccminrttus uint32 `protobuf:"varint,8,opt,name=ccminrttus" json:"ccminrttus" help:"minimal rtt in us"`
	// @inject_tag: help:"RTO in us"
	Ccrtous uint32 `protobuf:"varint,9,opt,name=ccrtous" json:"ccrtous" help:"RTO in us"`
	// @inject_tag: help:"rtt in us"
	Ccrttus uint32 `protobuf:"varint,10,opt,name=ccrttus" json:"ccrttus" help:"rtt in us"`
}

func (m *SCTPCongestionMetrics) Reset()                    { *m = SCTPCongestionMetrics{} }
func (m *SCTPCongestionMetrics) String() string            { return proto.CompactTextString(m) }
func (*SCTPCongestionMetrics) ProtoMessage()               {}
func (*SCTPCongestionMetrics) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *SCTPCongestionMetrics) GetCcsentqueuecnt() uint32 {
	if m != nil {
		return m.Ccsentqueuecnt
	}
	return 0
}

func (m *SCTPCongestionMetrics) GetCcsendqueuecnt() uint32 {
	if m != nil {
		return m.Ccsendqueuecnt
	}
	return 0
}

func (m *SCTPCongestionMetrics) GetCcsendpacingrate() uint32 {
	if m != nil {
		return m.Ccsendpacingrate
	}
	return 0
}

func (m *SCTPCongestionMetrics) GetCcmeasurebw() uint32 {
	if m != nil {
		return m.Ccmeasurebw
	}
	return 0
}

func (m *SCTPCongestionMetrics) GetCcinflightpkts() uint32 {
	if m != nil {
		return m.Ccinflightpkts
	}
	return 0
}

func (m *SCTPCongestionMetrics) GetCcinflightsize() uint32 {
	if m != nil {
		return m.Ccinflightsize
	}
	return 0
}

func (m *SCTPCongestionMetrics) GetCccwnd() uint32 {
	if m != nil {
		return m.Cccwnd
	}
	return 0
}

func (m *SCTPCongestionMetrics) GetCcminrttus() uint32 {
	if m != nil {
		return m.Ccminrttus
	}
	return 0
}

func (m *SCTPCongestionMetrics) GetCcrtous() uint32 {
	if m != nil {
		return m.Ccrtous
	}
	return 0
}

func (m *SCTPCongestionMetrics) GetCcrttus() uint32 {
	if m != nil {
		return m.Ccrttus
	}
	return 0
}

// SCTPDropMetrics contains packet drop statistics
type SCTPDropMetrics struct {
	// @inject_tag: help:"Packet drop from middle box"
	Pdrpfmbox uint32 `protobuf:"varint,1,opt,name=pdrpfmbox" json:"pdrpfmbox" help:"Packet drop from middle box"`
	// @inject_tag: help:"P-drop from end host"
	Pdrpfehos uint32 `protobuf:"varint,2,opt,name=pdrpfehos" json:"pdrpfehos" help:"P-drop from end host"`
	// @inject_tag: help:"P-drops with data"
	Pdrpmbda uint32 `protobuf:"varint,3,opt,name=pdrpmbda" json:"pdrpmbda" help:"P-drops with data"`
	// @inject_tag: help:"P-drops, non-data, non-endhost"
	Pdrpmbct uint32 `protobuf:"varint,4,opt,name=pdrpmbct" json:"pdrpmbct" help:"P-drops, non-data, non-endhost"`
	// @inject_tag: help:"P-drop, non-endhost, bandwidth rep only"
	Pdrpbwrpt uint32 `protobuf:"varint,5,opt,name=pdrpbwrpt" json:"pdrpbwrpt" help:"P-drop, non-endhost, bandwidth rep only"`
	// @inject_tag: help:"P-drop, not enough for chunk header"
	Pdrpcrupt uint32 `protobuf:"varint,6,opt,name=pdrpcrupt" json:"pdrpcrupt" help:"P-drop, not enough for chunk header"`
	// @inject_tag: help:"P-drop, not enough data to confirm"
	Pdrpnedat uint32 `protobuf:"varint,7,opt,name=pdrpnedat" json:"pdrpnedat" help:"P-drop, not enough data to confirm"`
	// @inject_tag: help:"P-drop, where process_chunk_drop said break"
	Pdrppdbrk uint32 `protobuf:"varint,8,opt,name=pdrppdbrk" json:"pdrppdbrk" help:"P-drop, where process_chunk_drop said break"`
	// @inject_tag: help:"P-drop, could not find TSN"
	Pdrptsnnf uint32 `protobuf:"varint,9,opt,name=pdrptsnnf" json:"pdrptsnnf" help:"P-drop, could not find TSN"`
	// @inject_tag: help:"P-drop, attempt reverse TSN lookup"
	Pdrpdnfnd uint32 `protobuf:"varint,10,opt,name=pdrpdnfnd" json:"pdrpdnfnd" help:"P-drop, attempt reverse TSN lookup"`
	// @inject_tag: help:"P-drop, e-host confirms zero-rwnd"
	Pdrpdiwnp uint32 `protobuf:"varint,11,opt,name=pdrpdiwnp" json:"pdrpdiwnp" help:"P-drop, e-host confirms zero-rwnd"`
	// @inject_tag: help:"P-drop, midbox confirms no space"
	Pdrpdizrw uint32 `protobuf:"varint,12,opt,name=pdrpdizrw" json:"pdrpdizrw" help:"P-drop, midbox confirms no space"`
	// @inject_tag: help:"P-drop, data did not match TSN"
	Pdrpbadd uint32 `protobuf:"varint,13,opt,name=pdrpbadd" json:"pdrpbadd" help:"P-drop, data did not match TSN"`
	// @inject_tag: help:"P-drop, TSN's marked for Fast Retran"
	Pdrpmark uint32 `protobuf:"varint,14,opt,name=pdrpmark" json:"pdrpmark" help:"P-drop, TSN's marked for Fast Retran"`
}

func (m *SCTPDropMetrics) Reset()                    { *m = SCTPDropMetrics{} }
func (m *SCTPDropMetrics) String() string            { return proto.CompactTextString(m) }
func (*SCTPDropMetrics) ProtoMessage()               {}
func (*SCTPDropMetrics) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

func (m *SCTPDropMetrics) GetPdrpfmbox() uint32 {
	if m != nil {
		return m.Pdrpfmbox
	}
	return 0
}

func (m *SCTPDropMetrics) GetPdrpfehos() uint32 {
	if m != nil {
		return m.Pdrpfehos
	}
	return 0
}

func (m *SCTPDropMetrics) GetPdrpmbda() uint32 {
	if m != nil {
		return m.Pdrpmbda
	}
	return 0
}

func (m *SCTPDropMetrics) GetPdrpmbct() uint32 {
	if m != nil {
		return m.Pdrpmbct
	}
	return 0
}

func (m *SCTPDropMetrics) GetPdrpbwrpt() uint32 {
	if m != nil {
		return m.Pdrpbwrpt
	}
	return 0
}

func (m *SCTPDropMetrics) GetPdrpcrupt() uint32 {
	if m != nil {
		return m.Pdrpcrupt
	}
	return 0
}

func (m *SCTPDropMetrics) GetPdrpnedat() uint32 {
	if m != nil {
		return m.Pdrpnedat
	}
	return 0
}

func (m *SCTPDropMetrics) GetPdrppdbrk() uint32 {
	if m != nil {
		return m.Pdrppdbrk
	}
	return 0
}

func (m *SCTPDropMetrics) GetPdrptsnnf() uint32 {
	if m != nil {
		return m.Pdrptsnnf
	}
	return 0
}

func (m *SCTPDropMetrics) GetPdrpdnfnd() uint32 {
	if m != nil {
		return m.Pdrpdnfnd
	}
	return 0
}

func (m *SCTPDropMetrics) GetPdrpdiwnp() uint32 {
	if m != nil {
		return m.Pdrpdiwnp
	}
	return 0
}

func (m *SCTPDropMetrics) GetPdrpdizrw() uint32 {
	if m != nil {
		return m.Pdrpdizrw
	}
	return 0
}

func (m *SCTPDropMetrics) GetPdrpbadd() uint32 {
	if m != nil {
		return m.Pdrpbadd
	}
	return 0
}

func (m *SCTPDropMetrics) GetPdrpmark() uint32 {
	if m != nil {
		return m.Pdrpmark
	}
	return 0
}

// SCTPTimeoutMetrics contains timeout statistics
type SCTPTimeoutMetrics struct {
	// @inject_tag: help:"Number of iterator timers that fired"
	Timoiterator uint32 `protobuf:"varint,1,opt,name=timoiterator" json:"timoiterator" help:"Number of iterator timers that fired"`
	// @inject_tag: help:"Number of T3 data time outs"
	Timodata uint32 `protobuf:"varint,2,opt,name=timodata" json:"timodata" help:"Number of T3 data time outs"`
	// @inject_tag: help:"Number of window probe (T3) timers that fired"
	Timowindowprobe uint32 `protobuf:"varint,3,opt,name=timowindowprobe" json:"timowindowprobe" help:"Number of window probe (T3) timers that fired"`
	// @inject_tag: help:"Number of INIT timers that fired"
	Timoinit uint32 `protobuf:"varint,4,opt,name=timoinit" json:"timoinit" help:"Number of INIT timers that fired"`
	// @inject_tag: help:"Number of sack timers that fired"
	Timosack uint32 `protobuf:"varint,5,opt,name=timosack" json:"timosack" help:"Number of sack timers that fired"`
	// @inject_tag: help:"Number of shutdown timers that fired"
	Timoshutdown uint32 `protobuf:"varint,6,opt,name=timoshutdown" json:"timoshutdown" help:"Number of shutdown timers that fired"`
	// @inject_tag: help:"Number of heartbeat timers that fired"
	Timoheartbeat uint32 `protobuf:"varint,7,opt,name=timoheartbeat" json:"timoheartbeat" help:"Number of heartbeat timers that fired"`
	// @inject_tag: help:"Number of times a cookie timeout fired"
	Timocookie uint32 `protobuf:"varint,8,opt,name=timocookie" json:"timocookie" help:"Number of times a cookie timeout fired"`
	// @inject_tag: help:"Number of times an endpoint changed its cookie secret"
	Timosecret uint32 `protobuf:"varint,9,opt,name=timosecret" json:"timosecret" help:"Number of times an endpoint changed its cookie secret"`
	// @inject_tag: help:"Number of PMTU timers that fired"
	Timopathmtu uint32 `protobuf:"varint,10,opt,name=timopathmtu" json:"timopathmtu" help:"Number of PMTU timers that fired"`
	// @inject_tag: help:"Number of shutdown ack timers that fired"
	Timoshutdownack uint32 `protobuf:"varint,11,opt,name=timoshutdownack" json:"timoshutdownack" help:"Number of shutdown ack timers that fired"`
	// @inject_tag: help:"Number of shutdown guard timers that fired"
	Timoshutdownguard uint32 `protobuf:"varint,12,opt,name=timoshutdownguard" json:"timoshutdownguard" help:"Number of shutdown guard timers that fired"`
	// @inject_tag: help:"Number of stream reset timers that fired"
	Timostrmrst uint32 `protobuf:"varint,13,opt,name=timostrmrst" json:"timostrmrst" help:"Number of stream reset timers that fired"`
	// @inject_tag: help:"Number of early FR timers that fired"
	Timoearlyfr uint32 `protobuf:"varint,14,opt,name=timoearlyfr" json:"timoearlyfr" help:"Number of early FR timers that fired"`
	// @inject_tag: help:"Number of times an asconf timer fired"
	Timoasconf uint32 `protobuf:"varint,15,opt,name=timoasconf" json:"timoasconf" help:"Number of times an asconf timer fired"`
	// @inject_tag: help:"Number of times a prim_deleted timer fired"
	Timodelprim uint32 `protobuf:"varint,16,opt,name=timodelprim" json:"timodelprim" help:"Number of times a prim_deleted timer fired"`
	// @inject_tag: help:"Number of times auto close timer fired"
	Timoautoclose uint32 `protobuf:"varint,17,opt,name=timoautoclose" json:"timoautoclose" help:"Number of times auto close timer fired"`
	// @inject_tag: help:"Number of asoc free timers expired"
	Timoassockill uint32 `protobuf:"varint,18,opt,name=timoassockill" json:"timoassockill" help:"Number of asoc free timers expired"`
	// @inject_tag: help:"Number of inp free timers expired"
	Timoinpkill uint32 `protobuf:"varint,19,opt,name=timoinpkill" json:"timoinpkill" help:"Number of inp free timers expired"`
}

func (m *SCTPTimeoutMetrics) Reset()                    { *m = SCTPTimeoutMetrics{} }
func (m *SCTPTimeoutMetrics) String() string            { return proto.CompactTextString(m) }
func (*SCTPTimeoutMetrics) ProtoMessage()               {}
func (*SCTPTimeoutMetrics) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{5} }

func (m *SCTPTimeoutMetrics) GetTimoiterator() uint32 {
	if m != nil {
		return m.Timoiterator
	}
	return 0
}

func (m *SCTPTimeoutMetrics) GetTimodata() uint32 {
	if m != nil {
		return m.Timodata
	}
	return 0
}

func (m *SCTPTimeoutMetrics) GetTimowindowprobe() uint32 {
	if m != nil {
		return m.Timowindowprobe
	}
	return 0
}

func (m *SCTPTimeoutMetrics) GetTimoinit() uint32 {
	if m != nil {
		return m.Timoinit
	}
	return 0
}

func (m *SCTPTimeoutMetrics) GetTimosack() uint32 {
	if m != nil {
		return m.Timosack
	}
	return 0
}

func (m *SCTPTimeoutMetrics) GetTimoshutdown() uint32 {
	if m != nil {
		return m.Timoshutdown
	}
	return 0
}

func (m *SCTPTimeoutMetrics) GetTimoheartbeat() uint32 {
	if m != nil {
		return m.Timoheartbeat
	}
	return 0
}

func (m *SCTPTimeoutMetrics) GetTimocookie() uint32 {
	if m != nil {
		return m.Timocookie
	}
	return 0
}

func (m *SCTPTimeoutMetrics) GetTimosecret() uint32 {
	if m != nil {
		return m.Timosecret
	}
	return 0
}

func (m *SCTPTimeoutMetrics) GetTimopathmtu() uint32 {
	if m != nil {
		return m.Timopathmtu
	}
	return 0
}

func (m *SCTPTimeoutMetrics) GetTimoshutdownack() uint32 {
	if m != nil {
		return m.Timoshutdownack
	}
	return 0
}

func (m *SCTPTimeoutMetrics) GetTimoshutdownguard() uint32 {
	if m != nil {
		return m.Timoshutdownguard
	}
	return 0
}

func (m *SCTPTimeoutMetrics) GetTimostrmrst() uint32 {
	if m != nil {
		return m.Timostrmrst
	}
	return 0
}

func (m *SCTPTimeoutMetrics) GetTimoearlyfr() uint32 {
	if m != nil {
		return m.Timoearlyfr
	}
	return 0
}

func (m *SCTPTimeoutMetrics) GetTimoasconf() uint32 {
	if m != nil {
		return m.Timoasconf
	}
	return 0
}

func (m *SCTPTimeoutMetrics) GetTimodelprim() uint32 {
	if m != nil {
		return m.Timodelprim
	}
	return 0
}

func (m *SCTPTimeoutMetrics) GetTimoautoclose() uint32 {
	if m != nil {
		return m.Timoautoclose
	}
	return 0
}

func (m *SCTPTimeoutMetrics) GetTimoassockill() uint32 {
	if m != nil {
		return m.Timoassockill
	}
	return 0
}

func (m *SCTPTimeoutMetrics) GetTimoinpkill() uint32 {
	if m != nil {
		return m.Timoinpkill
	}
	return 0
}

// SCTPOtherMetrics contains other statistics
type SCTPOtherMetrics struct {
	// @inject_tag: help:"packet shorter than header"
	Hdrops uint32 `protobuf:"varint,1,opt,name=hdrops" json:"hdrops" help:"packet shorter than header"`
	// @inject_tag: help:"checksum error"
	Badsum uint32 `protobuf:"varint,2,opt,name=badsum" json:"badsum" help:"checksum error"`
	// @inject_tag: help:"no endpoint for port"
	Noport uint32 `protobuf:"varint,3,opt,name=noport" json:"noport" help:"no endpoint for port"`
	// @inject_tag: help:"bad v-tag"
	Badvtag uint32 `protobuf:"varint,4,opt,name=badvtag" json:"badvtag" help:"bad v-tag"`
	// @inject_tag: help:"bad SID"
	Badsid uint32 `protobuf:"varint,5,opt,name=badsid" json:"badsid" help:"bad SID"`
	// @inject_tag: help:"no memory"
	Nomem uint32 `protobuf:"varint,6,opt,name=nomem" json:"nomem" help:"no memory"`
	// @inject_tag: help:"number of multiple FR in a RTT window"
	Fastretransinrtt uint32 `protobuf:"varint,7,opt,name=fastretransinrtt" json:"fastretransinrtt" help:"number of multiple FR in a RTT window"`
	// @inject_tag: help:"nagle allowed sending"
	Naglesent uint32 `protobuf:"varint,8,opt,name=naglesent" json:"naglesent" help:"nagle allowed sending"`
	// @inject_tag: help:"nagle doesn't allow sending"
	Naglequeued uint32 `protobuf:"varint,9,opt,name=naglequeued" json:"naglequeued" help:"nagle doesn't allow sending"`
	// @inject_tag: help:"max burst doesn't allow sending"
	Maxburstqueued uint32 `protobuf:"varint,10,opt,name=maxburstqueued" json:"maxburstqueued" help:"max burst doesn't allow sending"`
	// @inject_tag: help:"look ahead tells us no memory in interface ring buffer OR we had a send error and are queuing one send."
	Ifnomemqueued uint32 `protobuf:"varint,11,opt,name=ifnomemqueued" json:"ifnomemqueued" help:"look ahead tells us no memory in interface ring buffer OR we had a send error and are queuing one send."`
	// @inject_tag: help:"total number of window probes sent"
	Windowprobed uint32 `protobuf:"varint,12,opt,name=windowprobed" json:"windowprobed" help:"total number of window probes sent"`
	// @inject_tag: help:"total times an output error causes us to clamp down on next user send."
	Lowlevelerr uint32 `protobuf:"varint,13,opt,name=lowlevelerr" json:"lowlevelerr" help:"total times an output error causes us to clamp down on next user send."`
	// @inject_tag: help:"total times sctp_senderrors were caused from a user send from a user invoked send not a sack response"
	Lowlevelerrusr uint32 `protobuf:"varint,14,opt,name=lowlevelerrusr" json:"lowlevelerrusr" help:"total times sctp_senderrors were caused from a user send from a user invoked send not a sack response"`
	// @inject_tag: help:"Number of in data drops due to chunk limit reached"
	Datadropchklmt uint32 `protobuf:"varint,15,opt,name=datadropchklmt" json:"datadropchklmt" help:"Number of in data drops due to chunk limit reached"`
	// @inject_tag: help:"Number of in data drops due to rwnd limit reached"
	Datadroprwnd uint32 `protobuf:"varint,16,opt,name=datadroprwnd" json:"datadroprwnd" help:"Number of in data drops due to rwnd limit reached"`
	// @inject_tag: help:"Number of times a ECN reduced the cwnd"
	Ecnereducedcwnd uint32 `protobuf:"varint,17,opt,name=ecnereducedcwnd" json:"ecnereducedcwnd" help:"Number of times a ECN reduced the cwnd"`
	// @inject_tag: help:"Used express lookup via vtag"
	Vtagexpress uint32 `protobuf:"varint,18,opt,name=vtagexpress" json:"vtagexpress" help:"Used express lookup via vtag"`
	// @inject_tag: help:"Collision in express lookup."
	Vtagbogus uint32 `protobuf:"varint,19,opt,name=vtagbogus" json:"vtagbogus" help:"Collision in express lookup."`
	// @inject_tag: help:"Number of times the sender ran dry of user data on primary"
	PrimaryRandry uint32 `protobuf:"varint,20,opt,name=primary_randry,json=primaryRandry" json:"primary_randry" help:"Number of times the sender ran dry of user data on primary"`
	// @inject_tag: help:"Same for above"
	CmtRandry uint32 `protobuf:"varint,21,opt,name=cmt_randry,json=cmtRandry" json:"cmt_randry" help:"Same for above"`
	// @inject_tag: help:"Sacks the slow way"
	SlowpathSack uint32 `protobuf:"varint,22,opt,name=slowpath_sack,json=slowpathSack" json:"slowpath_sack" help:"Sacks the slow way"`
	// @inject_tag: help:"Window Update only sacks sent"
	WuSacksSent uint32 `protobuf:"varint,23,opt,name=wu_sacks_sent,json=wuSacksSent" json:"wu_sacks_sent" help:"Window Update only sacks sent"`
	// @inject_tag: help:"number of sends with sinfo_flags !=0"
	SendsWithFlags uint32 `protobuf:"varint,24,opt,name=sends_with_flags,json=sendsWithFlags" json:"sends_with_flags" help:"number of sends with sinfo_flags !=0"`
	// @inject_tag: help:"number of unordered sends"
	SendsWithUnord uint32 `protobuf:"varint,25,opt,name=sends_with_unord,json=sendsWithUnord" json:"sends_with_unord" help:"number of unordered sends"`
	// @inject_tag: help:"number of sends with EOF flag set"
	SendsWithEof uint32 `protobuf:"varint,26,opt,name=sends_with_eof,json=sendsWithEof" json:"sends_with_eof" help:"number of sends with EOF flag set"`
	// @inject_tag: help:"number of sends with ABORT flag set"
	SendsWithAbort uint32 `protobuf:"varint,27,opt,name=sends_with_abort,json=sendsWithAbort" json:"sends_with_abort" help:"number of sends with ABORT flag set"`
	// @inject_tag: help:"number of times protocol drain called"
	ProtocolDrainCalls uint32 `protobuf:"varint,28,opt,name=protocol_drain_calls,json=protocolDrainCalls" json:"protocol_drain_calls" help:"number of times protocol drain called"`
	// @inject_tag: help:"number of times we did a protocol drain"
	ProtocolDrainsDone uint32 `protobuf:"varint,29,opt,name=protocol_drains_done,json=protocolDrainsDone" json:"protocol_drains_done" help:"number of times we did a protocol drain"`
	// @inject_tag: help:"Number of times recv was called with peek"
	ReadPeeks uint32 `protobuf:"varint,30,opt,name=read_peeks,json=readPeeks" json:"read_peeks" help:"Number of times recv was called with peek"`
	// @inject_tag: help:"Number of cached chunks used"
	CachedChk uint32 `protobuf:"varint,31,opt,name=cached_chk,json=cachedChk" json:"cached_chk" help:"Number of cached chunks used"`
	// @inject_tag: help:"Number of cached stream oq's used"
	CachedStrmoq uint32 `protobuf:"varint,32,opt,name=cached_strmoq,json=cachedStrmoq" json:"cached_strmoq" help:"Number of cached stream oq's used"`
	// @inject_tag: help:"Number of unread messages abandoned by close"
	LeftAbandon uint32 `protobuf:"varint,33,opt,name=left_abandon,json=leftAbandon" json:"left_abandon" help:"Number of unread messages abandoned by close"`
	// @inject_tag: help:"Unused. send burst avoidance, already max burst inflight to net"
	SendBurstAvoid uint32 `protobuf:"varint,34,opt,name=send_burst_avoid,json=sendBurstAvoid" json:"send_burst_avoid" help:"Unused. send burst avoidance, already max burst inflight to net"`
	// @inject_tag: help:"Send cwnd full avoidance, already max burst inflight to net"
	SendCwndAvoid uint32 `protobuf:"varint,35,opt,name=send_cwnd_avoid,json=sendCwndAvoid" json:"send_cwnd_avoid" help:"Send cwnd full avoidance, already max burst inflight to net"`
	// @inject_tag: help:"number of map array over-runs via fwd-tsn's"
	FwdtsnMapOver uint32 `protobuf:"varint,36,opt,name=fwdtsn_map_over,json=fwdtsnMapOver" json:"fwdtsn_map_over" help:"number of map array over-runs via fwd-tsn's"`
}

func (m *SCTPOtherMetrics) Reset()                    { *m = SCTPOtherMetrics{} }
func (m *SCTPOtherMetrics) String() string            { return proto.CompactTextString(m) }
func (*SCTPOtherMetrics) ProtoMessage()               {}
func (*SCTPOtherMetrics) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{6} }

func (m *SCTPOtherMetrics) GetHdrops() uint32 {
	if m != nil {
		return m.Hdrops
	}
	return 0
}

func (m *SCTPOtherMetrics) GetBadsum() uint32 {
	if m != nil {
		return m.Badsum
	}
	return 0
}

func (m *SCTPOtherMetrics) GetNoport() uint32 {
	if m != nil {
		return m.Noport
	}
	return 0
}

func (m *SCTPOtherMetrics) GetBadvtag() uint32 {
	if m != nil {
		return m.Badvtag
	}
	return 0
}

func (m *SCTPOtherMetrics) GetBadsid() uint32 {
	if m != nil {
		return m.Badsid
	}
	return 0
}

func (m *SCTPOtherMetrics) GetNomem() uint32 {
	if m != nil {
		return m.Nomem
	}
	return 0
}

func (m *SCTPOtherMetrics) GetFastretransinrtt() uint32 {
	if m != nil {
		return m.Fastretransinrtt
	}
	return 0
}

func (m *SCTPOtherMetrics) GetNaglesent() uint32 {
	if m != nil {
		return m.Naglesent
	}
	return 0
}

func (m *SCTPOtherMetrics) GetNaglequeued() uint32 {
	if m != nil {
		return m.Naglequeued
	}
	return 0
}

func (m *SCTPOtherMetrics) GetMaxburstqueued() uint32 {
	if m != nil {
		return m.Maxburstqueued
	}
	return 0
}

func (m *SCTPOtherMetrics) GetIfnomemqueued() uint32 {
	if m != nil {
		return m.Ifnomemqueued
	}
	return 0
}

func (m *SCTPOtherMetrics) GetWindowprobed() uint32 {
	if m != nil {
		return m.Windowprobed
	}
	return 0
}

func (m *SCTPOtherMetrics) GetLowlevelerr() uint32 {
	if m != nil {
		return m.Lowlevelerr
	}
	return 0
}

func (m *SCTPOtherMetrics) GetLowlevelerrusr() uint32 {
	if m != nil {
		return m.Lowlevelerrusr
	}
	return 0
}

func (m *SCTPOtherMetrics) GetDatadropchklmt() uint32 {
	if m != nil {
		return m.Datadropchklmt
	}
	return 0
}

func (m *SCTPOtherMetrics) GetDatadroprwnd() uint32 {
	if m != nil {
		return m.Datadroprwnd
	}
	return 0
}

func (m *SCTPOtherMetrics) GetEcnereducedcwnd() uint32 {
	if m != nil {
		return m.Ecnereducedcwnd
	}
	return 0
}

func (m *SCTPOtherMetrics) GetVtagexpress() uint32 {
	if m != nil {
		return m.Vtagexpress
	}
	return 0
}

func (m *SCTPOtherMetrics) GetVtagbogus() uint32 {
	if m != nil {
		return m.Vtagbogus
	}
	return 0
}

func (m *SCTPOtherMetrics) GetPrimaryRandry() uint32 {
	if m != nil {
		return m.PrimaryRandry
	}
	return 0
}

func (m *SCTPOtherMetrics) GetCmtRandry() uint32 {
	if m != nil {
		return m.CmtRandry
	}
	return 0
}

func (m *SCTPOtherMetrics) GetSlowpathSack() uint32 {
	if m != nil {
		return m.SlowpathSack
	}
	return 0
}

func (m *SCTPOtherMetrics) GetWuSacksSent() uint32 {
	if m != nil {
		return m.WuSacksSent
	}
	return 0
}

func (m *SCTPOtherMetrics) GetSendsWithFlags() uint32 {
	if m != nil {
		return m.SendsWithFlags
	}
	return 0
}

func (m *SCTPOtherMetrics) GetSendsWithUnord() uint32 {
	if m != nil {
		return m.SendsWithUnord
	}
	return 0
}

func (m *SCTPOtherMetrics) GetSendsWithEof() uint32 {
	if m != nil {
		return m.SendsWithEof
	}
	return 0
}

func (m *SCTPOtherMetrics) GetSendsWithAbort() uint32 {
	if m != nil {
		return m.SendsWithAbort
	}
	return 0
}

func (m *SCTPOtherMetrics) GetProtocolDrainCalls() uint32 {
	if m != nil {
		return m.ProtocolDrainCalls
	}
	return 0
}

func (m *SCTPOtherMetrics) GetProtocolDrainsDone() uint32 {
	if m != nil {
		return m.ProtocolDrainsDone
	}
	return 0
}

func (m *SCTPOtherMetrics) GetReadPeeks() uint32 {
	if m != nil {
		return m.ReadPeeks
	}
	return 0
}

func (m *SCTPOtherMetrics) GetCachedChk() uint32 {
	if m != nil {
		return m.CachedChk
	}
	return 0
}

func (m *SCTPOtherMetrics) GetCachedStrmoq() uint32 {
	if m != nil {
		return m.CachedStrmoq
	}
	return 0
}

func (m *SCTPOtherMetrics) GetLeftAbandon() uint32 {
	if m != nil {
		return m.LeftAbandon
	}
	return 0
}

func (m *SCTPOtherMetrics) GetSendBurstAvoid() uint32 {
	if m != nil {
		return m.SendBurstAvoid
	}
	return 0
}

func (m *SCTPOtherMetrics) GetSendCwndAvoid() uint32 {
	if m != nil {
		return m.SendCwndAvoid
	}
	return 0
}

func (m *SCTPOtherMetrics) GetFwdtsnMapOver() uint32 {
	if m != nil {
		return m.FwdtsnMapOver
	}
	return 0
}

func init() {
	proto.RegisterType((*SCTPStat)(nil), "metrics.SCTPStat")
	proto.RegisterType((*SCTPInputMetrics)(nil), "metrics.SCTPInputMetrics")
	proto.RegisterType((*SCTPOutputMetrics)(nil), "metrics.SCTPOutputMetrics")
	proto.RegisterType((*SCTPCongestionMetrics)(nil), "metrics.SCTPCongestionMetrics")
	proto.RegisterType((*SCTPDropMetrics)(nil), "metrics.SCTPDropMetrics")
	proto.RegisterType((*SCTPTimeoutMetrics)(nil), "metrics.SCTPTimeoutMetrics")
	proto.RegisterType((*SCTPOtherMetrics)(nil), "metrics.SCTPOtherMetrics")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TurboProxy service

type TurboProxyClient interface {
	// ReportSCTP reports SCTP statistics of an Edge at a time
	ReportSCTP(ctx context.Context, in *SCTPStat, opts ...grpc.CallOption) (*Empty, error)
}

type turboProxyClient struct {
	cc *grpc.ClientConn
}

func NewTurboProxyClient(cc *grpc.ClientConn) TurboProxyClient {
	return &turboProxyClient{cc}
}

func (c *turboProxyClient) ReportSCTP(ctx context.Context, in *SCTPStat, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/metrics.TurboProxy/ReportSCTP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TurboProxy service

type TurboProxyServer interface {
	// ReportSCTP reports SCTP statistics of an Edge at a time
	ReportSCTP(context.Context, *SCTPStat) (*Empty, error)
}

func RegisterTurboProxyServer(s *grpc.Server, srv TurboProxyServer) {
	s.RegisterService(&_TurboProxy_serviceDesc, srv)
}

func _TurboProxy_ReportSCTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SCTPStat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurboProxyServer).ReportSCTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metrics.TurboProxy/ReportSCTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurboProxyServer).ReportSCTP(ctx, req.(*SCTPStat))
	}
	return interceptor(ctx, in, info, handler)
}

var _TurboProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metrics.TurboProxy",
	HandlerType: (*TurboProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportSCTP",
			Handler:    _TurboProxy_ReportSCTP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "turboproxy.proto",
}

func init() { proto.RegisterFile("turboproxy.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 1599 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x97, 0xcd, 0x6e, 0xdc, 0x38,
	0x12, 0xc7, 0x37, 0x71, 0xe2, 0x38, 0xb4, 0xdb, 0x1f, 0xca, 0xc7, 0x2a, 0xce, 0xc7, 0x26, 0x9d,
	0x6c, 0x10, 0x2c, 0x16, 0x41, 0x36, 0x7b, 0x5c, 0x60, 0x17, 0x5e, 0x3b, 0x03, 0xcc, 0x21, 0x48,
	0xd0, 0xce, 0x60, 0x8e, 0x02, 0x45, 0xb2, 0xbb, 0x89, 0x96, 0x48, 0x85, 0xa4, 0xdc, 0x76, 0x5e,
	0x64, 0x8e, 0x73, 0x9c, 0xd3, 0xcc, 0x83, 0xcd, 0x6d, 0xde, 0x60, 0x50, 0x14, 0x4b, 0xa4, 0xd4,
	0xbe, 0x75, 0xfd, 0xaa, 0x54, 0xa2, 0xaa, 0xfe, 0x2c, 0xb2, 0xc9, 0xa1, 0x6b, 0x4d, 0xa9, 0x1b,
	0xa3, 0x2f, 0xaf, 0xde, 0x36, 0x46, 0x3b, 0x9d, 0xdd, 0xa9, 0x85, 0x33, 0x92, 0xd9, 0xe3, 0x3d,
	0xa6, 0xeb, 0x5a, 0xab, 0x0e, 0x4f, 0x7f, 0xde, 0x22, 0x3b, 0xe7, 0xa7, 0x5f, 0x3e, 0x9f, 0x3b,
	0xea, 0xb2, 0xff, 0x92, 0x89, 0x54, 0x4d, 0xeb, 0x8a, 0x10, 0x9b, 0xdf, 0x78, 0x7e, 0xe3, 0xcd,
	0xee, 0xfb, 0x47, 0x6f, 0x83, 0xfd, 0x16, 0x22, 0xbf, 0x87, 0x88, 0x8f, 0x1d, 0x98, 0xed, 0xc9,
	0xc4, 0xca, 0x4e, 0xc8, 0xbe, 0x6e, 0x5d, 0x9a, 0xe0, 0xa6, 0x4f, 0x70, 0x3c, 0x48, 0xf0, 0xc9,
	0x87, 0x60, 0x86, 0x89, 0x4e, 0xcd, 0xec, 0x23, 0xc9, 0x98, 0x56, 0x0b, 0x61, 0x9d, 0xd4, 0xaa,
	0x4f, 0xb3, 0xe5, 0xd3, 0x3c, 0x1b, 0xa4, 0x39, 0xed, 0xc3, 0x30, 0xd5, 0x11, 0x1b, 0xa3, 0xec,
	0x3f, 0x64, 0x8f, 0x1b, 0xdd, 0xf4, 0x89, 0x6e, 0xf9, 0x44, 0xf9, 0x20, 0xd1, 0x99, 0xd1, 0x0d,
	0xa6, 0xd8, 0xe5, 0xd1, 0xc8, 0xce, 0xc8, 0x81, 0x93, 0xb5, 0xd0, 0xc9, 0xf7, 0xdc, 0xf6, 0xcf,
	0x3f, 0x1e, 0x3c, 0xff, 0xa5, 0x8b, 0xc1, 0x14, 0xfb, 0x6e, 0x60, 0x43, 0x51, 0xb5, 0x5b, 0x0a,
	0xd3, 0xe7, 0xd8, 0xbe, 0xa6, 0xa8, 0x9f, 0x20, 0xa2, 0x2f, 0xaa, 0x4e, 0xac, 0xe9, 0xef, 0xb7,
	0xc8, 0xe1, 0xb8, 0xee, 0xd9, 0x73, 0xb2, 0x6b, 0x04, 0xbb, 0x68, 0x28, 0x5b, 0x09, 0xd7, 0xf5,
	0x69, 0x32, 0x4b, 0x51, 0xf6, 0x8a, 0x4c, 0xc0, 0xe4, 0xd4, 0xd1, 0x85, 0xa1, 0x75, 0xd7, 0x8a,
	0xc9, 0x6c, 0x08, 0xb3, 0x37, 0xe4, 0xc0, 0x3f, 0xb4, 0x72, 0x6b, 0xe9, 0x96, 0xc0, 0x7d, 0xad,
	0x27, 0xb3, 0x31, 0xce, 0x9e, 0x90, 0xbb, 0x80, 0x2c, 0x65, 0xab, 0xae, 0x8c, 0x93, 0x59, 0x04,
	0xd9, 0x31, 0xd9, 0xc1, 0xc4, 0xbe, 0x46, 0x93, 0x59, 0x6f, 0xe3, 0x5a, 0x79, 0xdb, 0x78, 0xf7,
	0x76, 0x5c, 0x6b, 0x40, 0xb8, 0xd6, 0xa5, 0xa0, 0xc6, 0x95, 0x82, 0xba, 0xfc, 0x4e, 0x5c, 0x6b,
	0x0f, 0xb3, 0x7f, 0x90, 0xc3, 0x01, 0xa0, 0x6c, 0x95, 0xef, 0xf8, 0xc0, 0x0d, 0x8e, 0xeb, 0x11,
	0x4c, 0x89, 0xfc, 0x6e, 0x5c, 0x0f, 0xd8, 0xe8, 0xa3, 0xad, 0x5b, 0xe6, 0x24, 0xfa, 0xc0, 0xc6,
	0x7a, 0xc0, 0xef, 0x5a, 0x5a, 0x2b, 0xd5, 0x22, 0xdf, 0x8d, 0xf5, 0x48, 0x70, 0xf6, 0x9a, 0xec,
	0x03, 0x92, 0x17, 0xb4, 0x5a, 0xd6, 0x94, 0x49, 0x9e, 0xef, 0xf9, 0xc0, 0x11, 0xc5, 0x6f, 0x03,
	0xb2, 0x12, 0x57, 0x92, 0xe7, 0x93, 0xf8, 0x6d, 0x3d, 0xc4, 0x6c, 0xf0, 0x82, 0x39, 0x95, 0x95,
	0xe0, 0xf9, 0x7e, 0xcc, 0x16, 0x29, 0xd6, 0x52, 0x5c, 0x36, 0x46, 0x58, 0x9b, 0x1f, 0xc4, 0x5a,
	0x06, 0x94, 0x4d, 0xc9, 0x5e, 0x62, 0xd6, 0xf9, 0xa1, 0x0f, 0x19, 0xb0, 0x2c, 0x27, 0x77, 0xc0,
	0x76, 0x56, 0xe5, 0x47, 0xde, 0x8d, 0xe6, 0xf4, 0x97, 0x2d, 0x72, 0xb4, 0xb1, 0x47, 0xe1, 0xad,
	0x56, 0x28, 0x3e, 0x52, 0x5b, 0x82, 0x40, 0x1d, 0x60, 0x76, 0xea, 0xe8, 0x94, 0x16, 0x01, 0x54,
	0x1c, 0x8c, 0x44, 0x5e, 0xbd, 0x0d, 0x15, 0x87, 0xdf, 0x46, 0x38, 0x43, 0x95, 0xf5, 0x21, 0x9d,
	0xba, 0xc6, 0x18, 0x23, 0xe7, 0xd4, 0xba, 0x80, 0x83, 0xd4, 0xc6, 0x38, 0x7b, 0x47, 0xee, 0x01,
	0xaa, 0xdb, 0xca, 0xa5, 0xd1, 0x9d, 0xf2, 0xae, 0x73, 0x41, 0x97, 0x00, 0x6f, 0x28, 0x70, 0x00,
	0xf1, 0x3b, 0xbc, 0xaa, 0x76, 0xe2, 0x77, 0xa0, 0xaa, 0xe0, 0xb7, 0x57, 0xd5, 0xdd, 0xe8, 0xf3,
	0xaa, 0x7a, 0x46, 0x88, 0x8f, 0x33, 0x46, 0x1b, 0x1b, 0x34, 0x97, 0x10, 0xe8, 0x07, 0x58, 0xa5,
	0x55, 0x41, 0x6d, 0x68, 0xa2, 0x07, 0x3a, 0xb5, 0x17, 0x3d, 0xd0, 0xa9, 0x3f, 0x6e, 0x92, 0x07,
	0xd7, 0x8e, 0x41, 0xd0, 0x12, 0x63, 0x56, 0x28, 0xf7, 0xb5, 0x15, 0xad, 0x60, 0xca, 0x85, 0x86,
	0x8d, 0x68, 0x1f, 0xc7, 0xfb, 0xb8, 0x9b, 0x49, 0x5c, 0x4f, 0x61, 0xdf, 0x75, 0xa4, 0xa1, 0x4c,
	0xaa, 0x85, 0xa1, 0x4e, 0x84, 0x2e, 0x6e, 0x70, 0x50, 0x0a, 0x63, 0xb5, 0xa0, 0xb6, 0x35, 0xa2,
	0x5c, 0x87, 0x4e, 0xa6, 0xa8, 0x7b, 0xab, 0x54, 0xf3, 0x4a, 0x2e, 0x96, 0xae, 0x59, 0x39, 0x6c,
	0xe2, 0x88, 0x0e, 0xe3, 0xac, 0xfc, 0x26, 0x42, 0xfb, 0x46, 0x34, 0x7b, 0x48, 0xb6, 0x19, 0x63,
	0x6b, 0xc5, 0x43, 0xcb, 0x82, 0x05, 0x35, 0x67, 0xac, 0x96, 0xca, 0x38, 0xd7, 0xda, 0xd0, 0xad,
	0x84, 0x40, 0x65, 0x19, 0x33, 0x4e, 0xb7, 0x36, 0xb4, 0x0b, 0x4d, 0xf4, 0xc0, 0x63, 0x24, 0x7a,
	0x5c, 0x6b, 0xa7, 0xbf, 0x6e, 0x91, 0x83, 0xd1, 0x89, 0x01, 0xca, 0x6f, 0xb8, 0x69, 0xe6, 0x75,
	0xa9, 0x2f, 0x43, 0xa1, 0x23, 0xe8, 0xbd, 0x62, 0xa9, 0xfb, 0x7d, 0xd1, 0x03, 0xd0, 0x0c, 0x18,
	0x75, 0xc9, 0xfb, 0x7d, 0x81, 0x76, 0xf4, 0x31, 0x17, 0xca, 0xd8, 0xdb, 0x98, 0xb5, 0x5c, 0x9b,
	0xc6, 0x85, 0xf2, 0x45, 0x80, 0x5e, 0x66, 0xda, 0xc6, 0x85, 0xa2, 0x45, 0x80, 0x5e, 0x25, 0x78,
	0xaf, 0xf2, 0x08, 0xd0, 0xdb, 0xf0, 0xd2, 0xe0, 0x70, 0x8d, 0x00, 0xbd, 0xce, 0x2a, 0x35, 0x0f,
	0x55, 0x8b, 0x00, 0xbd, 0x5c, 0xcd, 0x15, 0x0f, 0x95, 0x8b, 0xa0, 0xf7, 0xca, 0xb5, 0x6a, 0x82,
	0xca, 0x23, 0x88, 0xde, 0x6f, 0x66, 0x1d, 0x94, 0x1e, 0x01, 0xd6, 0xa2, 0xa4, 0x1c, 0xc7, 0x67,
	0x6f, 0xf7, 0x75, 0xa2, 0x66, 0x15, 0x66, 0x66, 0x6f, 0x4f, 0x7f, 0xbb, 0x4d, 0xb2, 0xcd, 0x13,
	0x1a, 0x46, 0xa4, 0x93, 0xb5, 0x96, 0x4e, 0x18, 0xea, 0xb4, 0x09, 0x5d, 0x1b, 0x30, 0x48, 0x0b,
	0xb6, 0x9f, 0x47, 0x5d, 0xdf, 0x7a, 0x1b, 0x06, 0x11, 0xfc, 0x5e, 0x4b, 0xc5, 0xf5, 0xba, 0x31,
	0xba, 0xc4, 0xfd, 0x30, 0xc6, 0x98, 0x45, 0x2a, 0xd9, 0x37, 0x11, 0x6d, 0xf4, 0xc1, 0x84, 0xc4,
	0x23, 0x13, 0x6d, 0x5c, 0xa1, 0x5d, 0xb6, 0x8e, 0xeb, 0xb5, 0x0a, 0x5d, 0x1c, 0x30, 0x18, 0x59,
	0x60, 0x6f, 0x8c, 0xac, 0x01, 0x84, 0x6d, 0x00, 0x80, 0x69, 0xbd, 0x92, 0x38, 0xb4, 0x12, 0x82,
	0x7e, 0x2b, 0x98, 0x11, 0x2e, 0xf4, 0x34, 0x21, 0xb0, 0xa1, 0xc1, 0x6a, 0xa8, 0x5b, 0xd6, 0xae,
	0x0d, 0x6d, 0x4d, 0x11, 0x56, 0x03, 0xd7, 0x05, 0x9f, 0xb3, 0x1b, 0xab, 0x91, 0xe0, 0xec, 0x9f,
	0xe4, 0x28, 0x45, 0x8b, 0x96, 0x1a, 0x3c, 0x35, 0x37, 0x1d, 0xf8, 0x66, 0xeb, 0x4c, 0x6d, 0xac,
	0x0b, 0x7d, 0x4f, 0x11, 0x46, 0x08, 0x6a, 0xaa, 0xab, 0xb9, 0x09, 0xdd, 0x4f, 0x11, 0x7e, 0x1d,
	0xb5, 0x4c, 0xab, 0x79, 0x38, 0x2d, 0x13, 0x82, 0x19, 0xb8, 0xa8, 0x1a, 0x23, 0xf1, 0xac, 0x4c,
	0x11, 0x56, 0x99, 0xb6, 0x4e, 0xb3, 0x4a, 0x5b, 0x11, 0x0e, 0xcc, 0x21, 0xec, 0xa3, 0xac, 0xd5,
	0x6c, 0x25, 0xab, 0x2a, 0xcf, 0x92, 0x28, 0x84, 0xf8, 0x36, 0xa9, 0x1a, 0x1f, 0x73, 0x2f, 0xbe,
	0x2d, 0xa0, 0xe9, 0x4f, 0xa4, 0xbb, 0xeb, 0xa5, 0xd7, 0x41, 0x98, 0x70, 0x4b, 0xb8, 0x96, 0xe2,
	0xc1, 0x1b, 0x2c, 0xe0, 0x25, 0xe5, 0xb6, 0xad, 0x83, 0x40, 0x83, 0x05, 0x5c, 0xe9, 0x46, 0x1b,
	0x17, 0x54, 0x19, 0x2c, 0x98, 0x6b, 0x25, 0xe5, 0x17, 0x8e, 0x2e, 0x82, 0x16, 0xd1, 0xc4, 0x4c,
	0x92, 0x07, 0x21, 0x06, 0x2b, 0xbb, 0x4f, 0x6e, 0x2b, 0x5d, 0x8b, 0x3a, 0xe8, 0xaf, 0x33, 0xe0,
	0x3c, 0x48, 0x8e, 0x4e, 0x3f, 0x4f, 0x83, 0xf6, 0x36, 0x38, 0xec, 0x6b, 0x45, 0x17, 0x95, 0x80,
	0x83, 0x07, 0xe7, 0x49, 0x0f, 0xa0, 0x20, 0xde, 0xf0, 0x47, 0x0d, 0x0f, 0xea, 0x4b, 0x11, 0x9c,
	0x02, 0x35, 0xbd, 0x2c, 0x5b, 0x63, 0x5d, 0x08, 0xea, 0x14, 0x38, 0xa2, 0xd0, 0x00, 0x39, 0xf7,
	0xcb, 0x0b, 0x61, 0x9d, 0x04, 0x87, 0x10, 0xb6, 0x55, 0xb2, 0x3b, 0x51, 0x7b, 0x03, 0x06, 0x6b,
	0xaa, 0xf4, 0xba, 0x12, 0x17, 0xa2, 0x12, 0xc6, 0xa0, 0xec, 0x12, 0x04, 0x6b, 0x4a, 0xcc, 0xd6,
	0xa2, 0xf2, 0x46, 0x14, 0xe2, 0x60, 0x5c, 0x40, 0xb3, 0xd8, 0x72, 0x55, 0xd5, 0x2e, 0x08, 0x70,
	0x44, 0x61, 0x55, 0x48, 0x0c, 0x9c, 0x63, 0xe1, 0xc6, 0x96, 0x32, 0xd8, 0x64, 0x70, 0xcb, 0x30,
	0x82, 0xb7, 0x4c, 0x70, 0x7f, 0xdc, 0x75, 0x42, 0x1c, 0x63, 0x58, 0x3f, 0xf4, 0x14, 0x6f, 0x88,
	0x9d, 0x10, 0x53, 0x04, 0x3d, 0x01, 0xb3, 0xd4, 0x8b, 0xd6, 0x06, 0x11, 0x46, 0x90, 0xfd, 0x9d,
	0xec, 0x83, 0xf0, 0xa9, 0xb9, 0x2a, 0x0c, 0x55, 0xdc, 0x5c, 0xe5, 0xf7, 0xbb, 0x52, 0x06, 0x3a,
	0xf3, 0x30, 0x7b, 0x4a, 0x08, 0xab, 0x1d, 0x86, 0x3c, 0xe8, 0xb2, 0xb0, 0xda, 0x05, 0xf7, 0x4b,
	0x32, 0xb1, 0x95, 0x5e, 0xc3, 0x8c, 0x28, 0xfc, 0x84, 0x7b, 0xd8, 0x7d, 0x14, 0xc2, 0xf3, 0x6e,
	0xca, 0x4d, 0xd6, 0xad, 0x77, 0xdb, 0xc2, 0x0b, 0xe4, 0xaf, 0xdd, 0x62, 0xd7, 0x2d, 0xb8, 0xed,
	0x39, 0x48, 0xe4, 0x0d, 0x39, 0xf4, 0xf7, 0xc8, 0x02, 0xfe, 0x88, 0x14, 0xf3, 0x8a, 0x2e, 0x6c,
	0x9e, 0x77, 0x65, 0xf4, 0xfc, 0x47, 0xe9, 0x96, 0xdf, 0x01, 0x1d, 0x45, 0xb6, 0x4a, 0x1b, 0x9e,
	0x3f, 0x1a, 0x45, 0xfe, 0x00, 0x34, 0x7b, 0x45, 0xf6, 0x93, 0x48, 0xa1, 0xe7, 0xf9, 0x71, 0x58,
	0x1d, 0xc6, 0x7d, 0xd0, 0xf3, 0x51, 0x3e, 0x5a, 0xc2, 0x86, 0x7a, 0x3c, 0xca, 0x77, 0x02, 0x34,
	0x7b, 0x47, 0xee, 0xfb, 0x3f, 0xd3, 0x4c, 0x57, 0x05, 0x37, 0x54, 0xaa, 0x82, 0xd1, 0xaa, 0xb2,
	0xf9, 0x13, 0x1f, 0x9d, 0xa1, 0xef, 0x0c, 0x5c, 0xa7, 0xe0, 0xd9, 0x7c, 0xc2, 0x16, 0x5c, 0x2b,
	0x91, 0x3f, 0xbd, 0xe6, 0x09, 0x7b, 0xa6, 0x95, 0x80, 0x7a, 0x1b, 0x41, 0x79, 0xd1, 0x08, 0xb1,
	0xb2, 0xf9, 0x33, 0xfc, 0xff, 0x45, 0xf9, 0x67, 0x00, 0xbe, 0x1d, 0x94, 0x2d, 0x05, 0x2f, 0xd8,
	0x72, 0x95, 0xff, 0x2d, 0xb4, 0xc3, 0x93, 0xd3, 0xe5, 0x0a, 0xda, 0x11, 0xdc, 0x30, 0x3b, 0xf5,
	0xd7, 0xfc, 0x79, 0xf7, 0xc1, 0x1d, 0x3c, 0xf7, 0x2c, 0x7b, 0x41, 0xf6, 0x2a, 0x31, 0x77, 0x05,
	0x2d, 0xa9, 0xe2, 0x5a, 0xe5, 0x2f, 0x82, 0xf4, 0xc5, 0xdc, 0x9d, 0x74, 0x08, 0x6b, 0x52, 0xf8,
	0xad, 0x57, 0xd0, 0x0b, 0x2d, 0x79, 0x3e, 0x8d, 0x35, 0xf9, 0x3f, 0xe0, 0x13, 0xa0, 0xd9, 0xeb,
	0xee, 0xb2, 0x5e, 0x80, 0x26, 0x43, 0xe0, 0xcb, 0x78, 0xa5, 0x3e, 0x5d, 0x2b, 0xde, 0xc7, 0xcd,
	0xd7, 0x70, 0xa1, 0x2d, 0x6a, 0xda, 0x14, 0xfa, 0x42, 0x98, 0xfc, 0x55, 0x17, 0xd7, 0xe1, 0x8f,
	0xb4, 0xf9, 0x74, 0x21, 0xcc, 0xfb, 0xff, 0x11, 0xf2, 0xa5, 0x35, 0xa5, 0xfe, 0x6c, 0xf4, 0xe5,
	0x55, 0xf6, 0x2f, 0x42, 0x66, 0x02, 0x86, 0x1a, 0x0c, 0xcb, 0xec, 0x68, 0xf0, 0x57, 0xfa, 0xdc,
	0x51, 0x77, 0xbc, 0xdf, 0xa3, 0x0f, 0x75, 0xe3, 0xae, 0xa6, 0x7f, 0x29, 0xb7, 0x7d, 0x51, 0xff,
	0xfd, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x71, 0xe4, 0x6f, 0xbf, 0x1a, 0x11, 0x00, 0x00,
}
