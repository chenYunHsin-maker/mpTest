// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cubs_linkquality.proto

package metrics

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LinkQualityParameters struct {
	// @inject_tag: labelnames:"peer_name,link_name" help:"Jitter in milliseconds for a specific type of service"
	JitterMilliseconds float64 `protobuf:"fixed64,1,opt,name=jitterMilliseconds" json:"jitterMilliseconds" labelnames:"peer_name,link_name" help:"Jitter in milliseconds for a specific type of service"`
	// @inject_tag: help:"Total packet loss for a specific type of service"
	PacketLossRate float64 `protobuf:"fixed64,2,opt,name=packetLossRate" json:"packetLossRate" help:"Total packet loss for a specific type of service"`
	// @inject_tag: help:"Roundtrip time in milliseconds for a specific type of service"
	RoundtripTimeMilliseconds float64 `protobuf:"fixed64,3,opt,name=roundtripTimeMilliseconds" json:"roundtripTimeMilliseconds" help:"Roundtrip time in milliseconds for a specific type of service"`
}

func (m *LinkQualityParameters) Reset()                    { *m = LinkQualityParameters{} }
func (m *LinkQualityParameters) String() string            { return proto.CompactTextString(m) }
func (*LinkQualityParameters) ProtoMessage()               {}
func (*LinkQualityParameters) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *LinkQualityParameters) GetJitterMilliseconds() float64 {
	if m != nil {
		return m.JitterMilliseconds
	}
	return 0
}

func (m *LinkQualityParameters) GetPacketLossRate() float64 {
	if m != nil {
		return m.PacketLossRate
	}
	return 0
}

func (m *LinkQualityParameters) GetRoundtripTimeMilliseconds() float64 {
	if m != nil {
		return m.RoundtripTimeMilliseconds
	}
	return 0
}

type PerLinkQuality struct {
	// @inject_tag: label:"link_name=?" help:"link information for each vti connection."
	LinkName string `protobuf:"bytes,1,opt,name=link_name,json=linkName" json:"link_name" label:"link_name=?" help:"link information for each vti connection."`
	// @inject_tag: help:"detailed link quality parameters for each vti connection."
	QualityParameters *LinkQualityParameters `protobuf:"bytes,2,opt,name=quality_parameters,json=qualityParameters" json:"quality_parameters" help:"detailed link quality parameters for each vti connection."`
	// @inject_tag: help:"this fields that indicated vti connection failure."
	Failure bool `protobuf:"varint,3,opt,name=failure" json:"failure" help:"this fields that indicated vti connection failure."`
}

func (m *PerLinkQuality) Reset()                    { *m = PerLinkQuality{} }
func (m *PerLinkQuality) String() string            { return proto.CompactTextString(m) }
func (*PerLinkQuality) ProtoMessage()               {}
func (*PerLinkQuality) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *PerLinkQuality) GetLinkName() string {
	if m != nil {
		return m.LinkName
	}
	return ""
}

func (m *PerLinkQuality) GetQualityParameters() *LinkQualityParameters {
	if m != nil {
		return m.QualityParameters
	}
	return nil
}

func (m *PerLinkQuality) GetFailure() bool {
	if m != nil {
		return m.Failure
	}
	return false
}

type PeerLinkQuality struct {
	// @inject_tag: label:"peer_name=?" help:"all the information for the links of each site."
	PeerName string `protobuf:"bytes,1,opt,name=peer_name,json=peerName" json:"peer_name" label:"peer_name=?" help:"all the information for the links of each site."`
	// @inject_tag: help:"link quality for each vti connection for this site."
	PerLinkQuality []*PerLinkQuality `protobuf:"bytes,2,rep,name=per_link_quality,json=perLinkQuality" json:"per_link_quality" help:"link quality for each vti connection for this site."`
}

func (m *PeerLinkQuality) Reset()                    { *m = PeerLinkQuality{} }
func (m *PeerLinkQuality) String() string            { return proto.CompactTextString(m) }
func (*PeerLinkQuality) ProtoMessage()               {}
func (*PeerLinkQuality) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *PeerLinkQuality) GetPeerName() string {
	if m != nil {
		return m.PeerName
	}
	return ""
}

func (m *PeerLinkQuality) GetPerLinkQuality() []*PerLinkQuality {
	if m != nil {
		return m.PerLinkQuality
	}
	return nil
}

type LinkQuality struct {
	DeviceSn  string                     `protobuf:"bytes,3,opt,name=device_sn,json=deviceSn" json:"device_sn"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp"`
	Peer      []*PeerLinkQuality         `protobuf:"bytes,5,rep,name=peer" json:"peer"`
}

func (m *LinkQuality) Reset()                    { *m = LinkQuality{} }
func (m *LinkQuality) String() string            { return proto.CompactTextString(m) }
func (*LinkQuality) ProtoMessage()               {}
func (*LinkQuality) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *LinkQuality) GetDeviceSn() string {
	if m != nil {
		return m.DeviceSn
	}
	return ""
}

func (m *LinkQuality) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *LinkQuality) GetPeer() []*PeerLinkQuality {
	if m != nil {
		return m.Peer
	}
	return nil
}

func init() {
	proto.RegisterType((*LinkQualityParameters)(nil), "metrics.LinkQualityParameters")
	proto.RegisterType((*PerLinkQuality)(nil), "metrics.PerLinkQuality")
	proto.RegisterType((*PeerLinkQuality)(nil), "metrics.PeerLinkQuality")
	proto.RegisterType((*LinkQuality)(nil), "metrics.LinkQuality")
}

func init() { proto.RegisterFile("cubs_linkquality.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x41, 0x4f, 0xc2, 0x30,
	0x14, 0xc7, 0x33, 0x40, 0x61, 0x8f, 0x04, 0xb5, 0x89, 0x3a, 0x31, 0x51, 0xb2, 0x83, 0xe1, 0x60,
	0x46, 0x82, 0x17, 0x0f, 0x5e, 0xbc, 0x83, 0xc1, 0xca, 0x7d, 0x29, 0xe3, 0x41, 0x2a, 0xdb, 0x5a,
	0xda, 0xce, 0xc4, 0xaf, 0xe1, 0xc1, 0x6f, 0xe1, 0x77, 0x34, 0xeb, 0x00, 0x19, 0xe0, 0xb1, 0xff,
	0xfe, 0xdb, 0xf7, 0x7b, 0xff, 0xf7, 0xe0, 0x22, 0xca, 0x26, 0x3a, 0x8c, 0x79, 0xba, 0x58, 0x66,
	0x2c, 0xe6, 0xe6, 0x33, 0x90, 0x4a, 0x18, 0x41, 0xea, 0x09, 0x1a, 0xc5, 0x23, 0xdd, 0xbe, 0x9d,
	0x0b, 0x31, 0x8f, 0xb1, 0x67, 0xe5, 0x49, 0x36, 0xeb, 0x19, 0x9e, 0xa0, 0x36, 0x2c, 0x91, 0x85,
	0xd3, 0xff, 0x71, 0xe0, 0x7c, 0xc0, 0xd3, 0xc5, 0x6b, 0xf1, 0x7e, 0xc4, 0x14, 0x4b, 0xd0, 0xa0,
	0xd2, 0x24, 0x00, 0xf2, 0xce, 0x8d, 0x41, 0x35, 0xe4, 0x71, 0xcc, 0x35, 0x46, 0x22, 0x9d, 0x6a,
	0xcf, 0xe9, 0x38, 0x5d, 0x87, 0x1e, 0xb8, 0x21, 0x77, 0xd0, 0x92, 0x2c, 0x5a, 0xa0, 0x19, 0x08,
	0xad, 0x29, 0x33, 0xe8, 0x55, 0xac, 0x77, 0x47, 0x25, 0x4f, 0x70, 0xa5, 0x44, 0x96, 0x4e, 0x8d,
	0xe2, 0x72, 0xcc, 0x13, 0x2c, 0x7d, 0x5f, 0xb5, 0x4f, 0xfe, 0x37, 0xf8, 0xdf, 0x0e, 0xb4, 0x46,
	0xa8, 0xb6, 0x90, 0xc9, 0x35, 0xb8, 0x79, 0x02, 0x61, 0xca, 0x12, 0xb4, 0x7c, 0x2e, 0x6d, 0xe4,
	0xc2, 0x0b, 0x4b, 0x90, 0x0c, 0x81, 0xac, 0xa2, 0x09, 0xe5, 0xa6, 0x37, 0x4b, 0xd6, 0xec, 0xdf,
	0x04, 0xab, 0x98, 0x82, 0x83, 0x09, 0xd0, 0xb3, 0xe5, 0x5e, 0x28, 0x1e, 0xd4, 0x67, 0x8c, 0xc7,
	0x99, 0x42, 0x8b, 0xda, 0xa0, 0xeb, 0xa3, 0xbf, 0x84, 0x93, 0x11, 0xee, 0x81, 0x49, 0x44, 0x55,
	0x02, 0xcb, 0x05, 0x0b, 0xf6, 0x0c, 0xa7, 0x12, 0x95, 0x9d, 0x5d, 0xb8, 0xaa, 0xe3, 0x55, 0x3a,
	0xd5, 0x6e, 0xb3, 0x7f, 0xb9, 0xc1, 0x2a, 0x37, 0x4a, 0x5b, 0xb2, 0x74, 0xf6, 0xbf, 0x1c, 0x68,
	0xee, 0xd4, 0x9b, 0xe2, 0x07, 0x8f, 0x30, 0xd4, 0xa9, 0xc5, 0x73, 0x69, 0xa3, 0x10, 0xde, 0x52,
	0xf2, 0x08, 0xee, 0x66, 0xf6, 0x5e, 0xcd, 0xf6, 0xdf, 0x0e, 0x8a, 0xed, 0x08, 0xd6, 0xdb, 0x11,
	0x8c, 0xd7, 0x0e, 0xfa, 0x67, 0x26, 0xf7, 0x50, 0xcb, 0xa9, 0xbd, 0x23, 0x4b, 0xe7, 0x6d, 0xd1,
	0x95, 0xf1, 0xac, 0x6b, 0x72, 0x6c, 0x3f, 0x7b, 0xf8, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x20, 0x94,
	0x24, 0x30, 0x9b, 0x02, 0x00, 0x00,
}
