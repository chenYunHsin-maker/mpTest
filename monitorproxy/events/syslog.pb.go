// Code generated by protoc-gen-go. DO NOT EDIT.
// source: syslog.proto

package events

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TrafficLog struct {
	Duration  uint32 `protobuf:"varint,1,opt,name=duration" json:"duration"`
	Sent      uint64 `protobuf:"varint,2,opt,name=sent" json:"sent"`
	Received  uint64 `protobuf:"varint,3,opt,name=received" json:"received"`
	Dir       string `protobuf:"bytes,4,opt,name=dir" json:"dir"`
	Proto     uint32 `protobuf:"varint,5,opt,name=proto" json:"proto"`
	ProtoName string `protobuf:"bytes,6,opt,name=proto_name,json=protoName" json:"proto_name"`
}

func (m *TrafficLog) Reset()                    { *m = TrafficLog{} }
func (m *TrafficLog) String() string            { return proto.CompactTextString(m) }
func (*TrafficLog) ProtoMessage()               {}
func (*TrafficLog) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{0} }

func (m *TrafficLog) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *TrafficLog) GetSent() uint64 {
	if m != nil {
		return m.Sent
	}
	return 0
}

func (m *TrafficLog) GetReceived() uint64 {
	if m != nil {
		return m.Received
	}
	return 0
}

func (m *TrafficLog) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

func (m *TrafficLog) GetProto() uint32 {
	if m != nil {
		return m.Proto
	}
	return 0
}

func (m *TrafficLog) GetProtoName() string {
	if m != nil {
		return m.ProtoName
	}
	return ""
}

type IDPLog struct {
	Cls   string `protobuf:"bytes,1,opt,name=cls" json:"cls"`
	Act   string `protobuf:"bytes,2,opt,name=act" json:"act"`
	Sid   uint32 `protobuf:"varint,3,opt,name=sid" json:"sid"`
	Ob    string `protobuf:"bytes,4,opt,name=ob" json:"ob"`
	ObMac []byte `protobuf:"bytes,5,opt,name=ob_mac,json=obMac,proto3" json:"ob_mac"`
}

func (m *IDPLog) Reset()                    { *m = IDPLog{} }
func (m *IDPLog) String() string            { return proto.CompactTextString(m) }
func (*IDPLog) ProtoMessage()               {}
func (*IDPLog) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{1} }

func (m *IDPLog) GetCls() string {
	if m != nil {
		return m.Cls
	}
	return ""
}

func (m *IDPLog) GetAct() string {
	if m != nil {
		return m.Act
	}
	return ""
}

func (m *IDPLog) GetSid() uint32 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *IDPLog) GetOb() string {
	if m != nil {
		return m.Ob
	}
	return ""
}

func (m *IDPLog) GetObMac() []byte {
	if m != nil {
		return m.ObMac
	}
	return nil
}

type FirewallLog struct {
	Cls       string `protobuf:"bytes,1,opt,name=cls" json:"cls"`
	Ob        string `protobuf:"bytes,2,opt,name=ob" json:"ob"`
	ObMac     []byte `protobuf:"bytes,3,opt,name=ob_mac,json=obMac,proto3" json:"ob_mac"`
	Dir       string `protobuf:"bytes,4,opt,name=dir" json:"dir"`
	Proto     uint32 `protobuf:"varint,5,opt,name=proto" json:"proto"`
	ProtoName string `protobuf:"bytes,6,opt,name=proto_name,json=protoName" json:"proto_name"`
}

func (m *FirewallLog) Reset()                    { *m = FirewallLog{} }
func (m *FirewallLog) String() string            { return proto.CompactTextString(m) }
func (*FirewallLog) ProtoMessage()               {}
func (*FirewallLog) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{2} }

func (m *FirewallLog) GetCls() string {
	if m != nil {
		return m.Cls
	}
	return ""
}

func (m *FirewallLog) GetOb() string {
	if m != nil {
		return m.Ob
	}
	return ""
}

func (m *FirewallLog) GetObMac() []byte {
	if m != nil {
		return m.ObMac
	}
	return nil
}

func (m *FirewallLog) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

func (m *FirewallLog) GetProto() uint32 {
	if m != nil {
		return m.Proto
	}
	return 0
}

func (m *FirewallLog) GetProtoName() string {
	if m != nil {
		return m.ProtoName
	}
	return ""
}

type GEOIPLog struct {
	CountryCode string `protobuf:"bytes,1,opt,name=country_code,json=countryCode" json:"country_code"`
	CityCode    string `protobuf:"bytes,2,opt,name=city_code,json=cityCode" json:"city_code"`
	CountryName string `protobuf:"bytes,3,opt,name=country_name,json=countryName" json:"country_name"`
	CityName    string `protobuf:"bytes,4,opt,name=city_name,json=cityName" json:"city_name"`
}

func (m *GEOIPLog) Reset()                    { *m = GEOIPLog{} }
func (m *GEOIPLog) String() string            { return proto.CompactTextString(m) }
func (*GEOIPLog) ProtoMessage()               {}
func (*GEOIPLog) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{3} }

func (m *GEOIPLog) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *GEOIPLog) GetCityCode() string {
	if m != nil {
		return m.CityCode
	}
	return ""
}

func (m *GEOIPLog) GetCountryName() string {
	if m != nil {
		return m.CountryName
	}
	return ""
}

func (m *GEOIPLog) GetCityName() string {
	if m != nil {
		return m.CityName
	}
	return ""
}

type Devicelog struct {
	// Represents seconds of UTC time since Unix epoch
	// 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
	// 9999-12-31T23:59:59Z inclusive.
	Timestamp int64  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp"`
	Severity  int32  `protobuf:"varint,2,opt,name=severity" json:"severity"`
	Facility  int32  `protobuf:"varint,3,opt,name=facility" json:"facility"`
	Category  string `protobuf:"bytes,4,opt,name=category" json:"category"`
	// IP address is serialized in network-byte-order. It may
	// either be an IPv4 or IPv6 address.
	// Reference https://github.com/grpc/grpc/blob/master/src/proto/grpc/lb/v1/load_balancer.proto
	Srcip []byte `protobuf:"bytes,5,opt,name=srcip,proto3" json:"srcip"`
	Dstip []byte `protobuf:"bytes,6,opt,name=dstip,proto3" json:"dstip"`
	// IP protocol
	Ipproto int32 `protobuf:"varint,7,opt,name=ipproto" json:"ipproto"`
	// Port number
	Sport       int32        `protobuf:"varint,8,opt,name=sport" json:"sport"`
	Dport       int32        `protobuf:"varint,9,opt,name=dport" json:"dport"`
	DeviceSn    string       `protobuf:"bytes,10,opt,name=device_sn,json=deviceSn" json:"device_sn"`
	Logmessage  string       `protobuf:"bytes,11,opt,name=logmessage" json:"logmessage"`
	Note        string       `protobuf:"bytes,12,opt,name=note" json:"note"`
	Username    string       `protobuf:"bytes,13,opt,name=username" json:"username"`
	Srciface    string       `protobuf:"bytes,14,opt,name=srciface" json:"srciface"`
	Dstiface    string       `protobuf:"bytes,15,opt,name=dstiface" json:"dstiface"`
	ProtoName   string       `protobuf:"bytes,16,opt,name=proto_name,json=protoName" json:"proto_name"`
	Devmac      []byte       `protobuf:"bytes,17,opt,name=devmac,proto3" json:"devmac"`
	Count       uint32       `protobuf:"varint,18,opt,name=count" json:"count"`
	TrafficLog  *TrafficLog  `protobuf:"bytes,19,opt,name=traffic_log,json=trafficLog" json:"traffic_log"`
	IdpLog      *IDPLog      `protobuf:"bytes,20,opt,name=idp_log,json=idpLog" json:"idp_log"`
	FirewallLog *FirewallLog `protobuf:"bytes,21,opt,name=firewall_log,json=firewallLog" json:"firewall_log"`
	GeoSrc      *GEOIPLog    `protobuf:"bytes,22,opt,name=geo_src,json=geoSrc" json:"geo_src"`
	GeoDst      *GEOIPLog    `protobuf:"bytes,23,opt,name=geo_dst,json=geoDst" json:"geo_dst"`
}

func (m *Devicelog) Reset()                    { *m = Devicelog{} }
func (m *Devicelog) String() string            { return proto.CompactTextString(m) }
func (*Devicelog) ProtoMessage()               {}
func (*Devicelog) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{4} }

func (m *Devicelog) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Devicelog) GetSeverity() int32 {
	if m != nil {
		return m.Severity
	}
	return 0
}

func (m *Devicelog) GetFacility() int32 {
	if m != nil {
		return m.Facility
	}
	return 0
}

func (m *Devicelog) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Devicelog) GetSrcip() []byte {
	if m != nil {
		return m.Srcip
	}
	return nil
}

func (m *Devicelog) GetDstip() []byte {
	if m != nil {
		return m.Dstip
	}
	return nil
}

func (m *Devicelog) GetIpproto() int32 {
	if m != nil {
		return m.Ipproto
	}
	return 0
}

func (m *Devicelog) GetSport() int32 {
	if m != nil {
		return m.Sport
	}
	return 0
}

func (m *Devicelog) GetDport() int32 {
	if m != nil {
		return m.Dport
	}
	return 0
}

func (m *Devicelog) GetDeviceSn() string {
	if m != nil {
		return m.DeviceSn
	}
	return ""
}

func (m *Devicelog) GetLogmessage() string {
	if m != nil {
		return m.Logmessage
	}
	return ""
}

func (m *Devicelog) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *Devicelog) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Devicelog) GetSrciface() string {
	if m != nil {
		return m.Srciface
	}
	return ""
}

func (m *Devicelog) GetDstiface() string {
	if m != nil {
		return m.Dstiface
	}
	return ""
}

func (m *Devicelog) GetProtoName() string {
	if m != nil {
		return m.ProtoName
	}
	return ""
}

func (m *Devicelog) GetDevmac() []byte {
	if m != nil {
		return m.Devmac
	}
	return nil
}

func (m *Devicelog) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Devicelog) GetTrafficLog() *TrafficLog {
	if m != nil {
		return m.TrafficLog
	}
	return nil
}

func (m *Devicelog) GetIdpLog() *IDPLog {
	if m != nil {
		return m.IdpLog
	}
	return nil
}

func (m *Devicelog) GetFirewallLog() *FirewallLog {
	if m != nil {
		return m.FirewallLog
	}
	return nil
}

func (m *Devicelog) GetGeoSrc() *GEOIPLog {
	if m != nil {
		return m.GeoSrc
	}
	return nil
}

func (m *Devicelog) GetGeoDst() *GEOIPLog {
	if m != nil {
		return m.GeoDst
	}
	return nil
}

func init() {
	proto.RegisterType((*TrafficLog)(nil), "events.TrafficLog")
	proto.RegisterType((*IDPLog)(nil), "events.IDPLog")
	proto.RegisterType((*FirewallLog)(nil), "events.FirewallLog")
	proto.RegisterType((*GEOIPLog)(nil), "events.GEOIPLog")
	proto.RegisterType((*Devicelog)(nil), "events.Devicelog")
}

func init() { proto.RegisterFile("syslog.proto", fileDescriptor14) }

var fileDescriptor14 = []byte{
	// 620 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcb, 0x6e, 0xdb, 0x3a,
	0x10, 0x85, 0x2c, 0x5b, 0xb6, 0xc6, 0x4e, 0xae, 0x2f, 0xf3, 0xb8, 0xc4, 0xed, 0x03, 0x6e, 0x36,
	0x75, 0x37, 0x59, 0x34, 0x40, 0x7f, 0xa0, 0x69, 0x8b, 0x00, 0x7d, 0x81, 0xe9, 0xde, 0xa0, 0xa9,
	0xb1, 0x40, 0x40, 0x16, 0x05, 0x92, 0x71, 0xe1, 0x5f, 0x28, 0xd0, 0x6f, 0xe8, 0x17, 0xf5, 0x9f,
	0x0a, 0x0e, 0x25, 0xdb, 0x0d, 0x82, 0xae, 0xba, 0x9b, 0x73, 0xe6, 0x75, 0x38, 0xe4, 0x10, 0x26,
	0x6e, 0xeb, 0x2a, 0x53, 0x5e, 0x36, 0xd6, 0x78, 0xc3, 0x32, 0xdc, 0x60, 0xed, 0xdd, 0xc5, 0x8f,
	0x04, 0xe0, 0x8b, 0x95, 0xab, 0x95, 0x56, 0xef, 0x4d, 0xc9, 0xfe, 0x87, 0x51, 0x71, 0x67, 0xa5,
	0xd7, 0xa6, 0xe6, 0xc9, 0x2c, 0x99, 0x1f, 0x89, 0x1d, 0x66, 0x0c, 0xfa, 0x0e, 0x6b, 0xcf, 0x7b,
	0xb3, 0x64, 0xde, 0x17, 0x64, 0x87, 0x78, 0x8b, 0x0a, 0xf5, 0x06, 0x0b, 0x9e, 0x12, 0xbf, 0xc3,
	0x6c, 0x0a, 0x69, 0xa1, 0x2d, 0xef, 0xcf, 0x92, 0x79, 0x2e, 0x82, 0xc9, 0x4e, 0x61, 0x40, 0xdd,
	0xf9, 0x80, 0x4a, 0x47, 0xc0, 0x9e, 0x00, 0x90, 0xb1, 0xa8, 0xe5, 0x1a, 0x79, 0x46, 0xe1, 0x39,
	0x31, 0x1f, 0xe5, 0x1a, 0x2f, 0x10, 0xb2, 0x9b, 0xeb, 0xcf, 0x41, 0xdc, 0x14, 0x52, 0x55, 0x39,
	0xd2, 0x95, 0x8b, 0x60, 0x06, 0x46, 0xaa, 0xa8, 0x28, 0x17, 0xc1, 0x0c, 0x8c, 0xd3, 0x51, 0xcb,
	0x91, 0x08, 0x26, 0x3b, 0x86, 0x9e, 0x59, 0xb6, 0x2a, 0x7a, 0x66, 0xc9, 0xce, 0x20, 0x33, 0xcb,
	0xc5, 0x5a, 0x2a, 0x52, 0x31, 0x11, 0x03, 0xb3, 0xfc, 0x20, 0xd5, 0xc5, 0xf7, 0x04, 0xc6, 0x6f,
	0xb5, 0xc5, 0xaf, 0xb2, 0xaa, 0x1e, 0x6e, 0x16, 0x0b, 0xf5, 0x1e, 0x28, 0x94, 0x1e, 0x14, 0xfa,
	0x5b, 0xc7, 0xfe, 0x96, 0xc0, 0xe8, 0xdd, 0x9b, 0x4f, 0x37, 0x74, 0xf2, 0x67, 0x30, 0x51, 0xe6,
	0xae, 0xf6, 0x76, 0xbb, 0x50, 0xa6, 0xc0, 0x56, 0xd5, 0xb8, 0xe5, 0x5e, 0x9b, 0x02, 0xd9, 0x23,
	0xc8, 0x95, 0xf6, 0xad, 0x3f, 0x8a, 0x1c, 0x05, 0x82, 0x9c, 0x07, 0xf9, 0xd4, 0x2d, 0xfd, 0x2d,
	0x3f, 0xf4, 0xdb, 0xe5, 0x93, 0xbf, 0xbf, 0xcf, 0x27, 0x31, 0x3f, 0x07, 0x90, 0x5f, 0xe3, 0x46,
	0x2b, 0xac, 0x4c, 0xc9, 0x1e, 0x43, 0xee, 0xf5, 0x1a, 0x9d, 0x97, 0xeb, 0x86, 0xa4, 0xa4, 0x62,
	0x4f, 0x84, 0x27, 0xe1, 0x70, 0x83, 0x56, 0xfb, 0x2d, 0xe9, 0x18, 0x88, 0x1d, 0x0e, 0xbe, 0x95,
	0x54, 0xba, 0x0a, 0xbe, 0x34, 0xfa, 0x3a, 0x1c, 0x7c, 0x4a, 0x7a, 0x2c, 0x8d, 0xdd, 0xee, 0xfa,
	0xb7, 0x38, 0x4c, 0xd0, 0x59, 0xa5, 0x9b, 0xee, 0xca, 0x08, 0x04, 0xb6, 0x70, 0x5e, 0x37, 0x34,
	0xbc, 0x89, 0x88, 0x80, 0x71, 0x18, 0xea, 0x26, 0xce, 0x7b, 0x48, 0x2d, 0x3a, 0x48, 0x55, 0x1a,
	0x63, 0x3d, 0x1f, 0x11, 0x1f, 0x01, 0x55, 0x21, 0x36, 0x8f, 0x2c, 0x81, 0x30, 0x8e, 0x82, 0x0e,
	0xbc, 0x70, 0x35, 0x87, 0x28, 0x27, 0x12, 0xb7, 0x35, 0x7b, 0x0a, 0x50, 0x99, 0x72, 0x8d, 0xce,
	0xc9, 0x12, 0xf9, 0x98, 0xbc, 0x07, 0x4c, 0xd8, 0x94, 0xda, 0x78, 0xe4, 0x13, 0xf2, 0x90, 0x1d,
	0x8e, 0x77, 0xe7, 0xd0, 0xd2, 0x78, 0x8f, 0x62, 0xbd, 0x0e, 0xd3, 0xc8, 0xac, 0xd2, 0x2b, 0xa9,
	0x90, 0x1f, 0x47, 0x5f, 0x87, 0x69, 0x23, 0x9d, 0x8f, 0xbe, 0x7f, 0x5a, 0x1d, 0x2d, 0xbe, 0xf7,
	0x84, 0xa6, 0xf7, 0x9e, 0x10, 0x3b, 0x87, 0xac, 0xc0, 0x4d, 0x78, 0xa0, 0xff, 0xd2, 0x80, 0x5a,
	0x14, 0x4e, 0x4c, 0x37, 0xcf, 0x59, 0x7c, 0x8f, 0x04, 0xd8, 0x15, 0x8c, 0x7d, 0xfc, 0x08, 0x16,
	0x95, 0x29, 0xf9, 0xc9, 0x2c, 0x99, 0x8f, 0x5f, 0xb2, 0xcb, 0xf8, 0x4f, 0x5c, 0xee, 0xff, 0x08,
	0x01, 0x7e, 0xff, 0x5f, 0x3c, 0x87, 0xa1, 0x2e, 0x1a, 0x4a, 0x38, 0xa5, 0x84, 0xe3, 0x2e, 0x21,
	0xee, 0xac, 0xc8, 0x74, 0xd1, 0x84, 0xc0, 0x57, 0x30, 0x59, 0xb5, 0xdb, 0x45, 0xd1, 0x67, 0x14,
	0x7d, 0xd2, 0x45, 0x1f, 0x6c, 0x9e, 0x18, 0xaf, 0x0e, 0xd6, 0xf0, 0x05, 0x0c, 0x4b, 0x34, 0x0b,
	0x67, 0x15, 0x3f, 0xa7, 0x94, 0x69, 0x97, 0xd2, 0x2d, 0x87, 0xc8, 0x4a, 0x34, 0xb7, 0x56, 0x75,
	0xa1, 0x85, 0xf3, 0xfc, 0xbf, 0x3f, 0x84, 0x5e, 0x3b, 0xbf, 0xcc, 0x68, 0x48, 0x57, 0xbf, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x2d, 0xb5, 0xbc, 0xa0, 0x14, 0x05, 0x00, 0x00,
}
