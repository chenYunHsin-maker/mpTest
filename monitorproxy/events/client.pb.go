// Code generated by protoc-gen-go. DO NOT EDIT.
// source: client.proto

package events

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type OSInfo struct {
	ProductName    string `protobuf:"bytes,1,opt,name=product_name,json=productName" json:"product_name"`
	ProductVersion string `protobuf:"bytes,2,opt,name=product_version,json=productVersion" json:"product_version"`
	ExtraOsInfo    string `protobuf:"bytes,3,opt,name=extra_os_info,json=extraOsInfo" json:"extra_os_info"`
	DhcpPacket     []byte `protobuf:"bytes,4,opt,name=dhcp_packet,json=dhcpPacket,proto3" json:"dhcp_packet"`
}

func (m *OSInfo) Reset()                    { *m = OSInfo{} }
func (m *OSInfo) String() string            { return proto.CompactTextString(m) }
func (*OSInfo) ProtoMessage()               {}
func (*OSInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *OSInfo) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *OSInfo) GetProductVersion() string {
	if m != nil {
		return m.ProductVersion
	}
	return ""
}

func (m *OSInfo) GetExtraOsInfo() string {
	if m != nil {
		return m.ExtraOsInfo
	}
	return ""
}

func (m *OSInfo) GetDhcpPacket() []byte {
	if m != nil {
		return m.DhcpPacket
	}
	return nil
}

type ClientInfo struct {
	LoginName string                     `protobuf:"bytes,1,opt,name=login_name,json=loginName" json:"login_name"`
	Hostname  string                     `protobuf:"bytes,2,opt,name=hostname" json:"hostname"`
	MacAddr   []byte                     `protobuf:"bytes,3,opt,name=mac_addr,json=macAddr,proto3" json:"mac_addr"`
	Ipv4Addr  [][]byte                   `protobuf:"bytes,4,rep,name=ipv4_addr,json=ipv4Addr,proto3" json:"ipv4_addr"`
	Ipv6Addr  [][]byte                   `protobuf:"bytes,5,rep,name=ipv6_addr,json=ipv6Addr,proto3" json:"ipv6_addr"`
	Os        *OSInfo                    `protobuf:"bytes,6,opt,name=os" json:"os"`
	DeviceSn  string                     `protobuf:"bytes,7,opt,name=device_sn,json=deviceSn" json:"device_sn"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=timestamp" json:"timestamp"`
}

func (m *ClientInfo) Reset()                    { *m = ClientInfo{} }
func (m *ClientInfo) String() string            { return proto.CompactTextString(m) }
func (*ClientInfo) ProtoMessage()               {}
func (*ClientInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *ClientInfo) GetLoginName() string {
	if m != nil {
		return m.LoginName
	}
	return ""
}

func (m *ClientInfo) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *ClientInfo) GetMacAddr() []byte {
	if m != nil {
		return m.MacAddr
	}
	return nil
}

func (m *ClientInfo) GetIpv4Addr() [][]byte {
	if m != nil {
		return m.Ipv4Addr
	}
	return nil
}

func (m *ClientInfo) GetIpv6Addr() [][]byte {
	if m != nil {
		return m.Ipv6Addr
	}
	return nil
}

func (m *ClientInfo) GetOs() *OSInfo {
	if m != nil {
		return m.Os
	}
	return nil
}

func (m *ClientInfo) GetDeviceSn() string {
	if m != nil {
		return m.DeviceSn
	}
	return ""
}

func (m *ClientInfo) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type UserInfo struct {
	LoginName string                     `protobuf:"bytes,1,opt,name=login_name,json=loginName" json:"login_name"`
	LoginTime int64                      `protobuf:"varint,2,opt,name=login_time,json=loginTime" json:"login_time"`
	Ipv4Addr  [][]byte                   `protobuf:"bytes,3,rep,name=ipv4_addr,json=ipv4Addr,proto3" json:"ipv4_addr"`
	Ipv6Addr  [][]byte                   `protobuf:"bytes,4,rep,name=ipv6_addr,json=ipv6Addr,proto3" json:"ipv6_addr"`
	DeviceSn  string                     `protobuf:"bytes,5,opt,name=device_sn,json=deviceSn" json:"device_sn"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=timestamp" json:"timestamp"`
	UserGroup string                     `protobuf:"bytes,7,opt,name=user_group,json=userGroup" json:"user_group"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *UserInfo) GetLoginName() string {
	if m != nil {
		return m.LoginName
	}
	return ""
}

func (m *UserInfo) GetLoginTime() int64 {
	if m != nil {
		return m.LoginTime
	}
	return 0
}

func (m *UserInfo) GetIpv4Addr() [][]byte {
	if m != nil {
		return m.Ipv4Addr
	}
	return nil
}

func (m *UserInfo) GetIpv6Addr() [][]byte {
	if m != nil {
		return m.Ipv6Addr
	}
	return nil
}

func (m *UserInfo) GetDeviceSn() string {
	if m != nil {
		return m.DeviceSn
	}
	return ""
}

func (m *UserInfo) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *UserInfo) GetUserGroup() string {
	if m != nil {
		return m.UserGroup
	}
	return ""
}

func init() {
	proto.RegisterType((*OSInfo)(nil), "events.OSInfo")
	proto.RegisterType((*ClientInfo)(nil), "events.ClientInfo")
	proto.RegisterType((*UserInfo)(nil), "events.UserInfo")
}

func init() { proto.RegisterFile("client.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xb1, 0x6f, 0x9b, 0x40,
	0x14, 0xc6, 0x05, 0xd8, 0x18, 0x9e, 0xa9, 0x2b, 0x31, 0x51, 0x57, 0xad, 0x29, 0x4b, 0x99, 0xb0,
	0xd4, 0x56, 0x56, 0xd7, 0xaa, 0x43, 0xd5, 0xa5, 0xae, 0x70, 0x92, 0x15, 0x9d, 0xe1, 0x8c, 0x51,
	0xcc, 0x1d, 0xba, 0x3b, 0x50, 0xfe, 0x8f, 0x4c, 0xf9, 0x4f, 0x33, 0x46, 0x77, 0x87, 0x89, 0x9d,
	0xc1, 0x4a, 0x46, 0x7e, 0xdf, 0x77, 0x8f, 0xef, 0x7b, 0x0f, 0xbc, 0xfc, 0x50, 0x61, 0x22, 0x92,
	0x86, 0x51, 0x41, 0x7d, 0x1b, 0x77, 0x98, 0x08, 0x3e, 0x5f, 0x94, 0x94, 0x96, 0x07, 0xbc, 0x54,
	0x74, 0xdb, 0xee, 0x96, 0xa2, 0xaa, 0x31, 0x17, 0xa8, 0x6e, 0xb4, 0x31, 0x7a, 0x30, 0xc0, 0x5e,
	0x6f, 0xfe, 0x92, 0x1d, 0xf5, 0xbf, 0x80, 0xd7, 0x30, 0x5a, 0xb4, 0xb9, 0xc8, 0x08, 0xaa, 0x71,
	0x60, 0x84, 0x46, 0xec, 0xa6, 0xd3, 0x9e, 0xfd, 0x43, 0x35, 0xf6, 0xbf, 0xc2, 0xfb, 0xa3, 0xa5,
	0xc3, 0x8c, 0x57, 0x94, 0x04, 0xa6, 0x72, 0xcd, 0x7a, 0x7c, 0xa3, 0xa9, 0x1f, 0xc1, 0x3b, 0x7c,
	0x27, 0x18, 0xca, 0x28, 0xcf, 0x2a, 0xb2, 0xa3, 0x81, 0xa5, 0x87, 0x29, 0xb8, 0xe6, 0xea, 0x7f,
	0x0b, 0x98, 0x16, 0xfb, 0xbc, 0xc9, 0x1a, 0x94, 0xdf, 0x62, 0x11, 0x8c, 0x42, 0x23, 0xf6, 0x52,
	0x90, 0xe8, 0xbf, 0x22, 0xd1, 0xbd, 0x09, 0xf0, 0x5b, 0xb5, 0x52, 0xfe, 0x4f, 0x00, 0x07, 0x5a,
	0x56, 0xe4, 0x34, 0x9d, 0xab, 0x88, 0xca, 0x36, 0x07, 0x67, 0x4f, 0xb9, 0x50, 0xa2, 0x0e, 0x35,
	0x7c, 0xfb, 0x1f, 0xc0, 0xa9, 0x51, 0x9e, 0xa1, 0xa2, 0x60, 0x2a, 0x89, 0x97, 0x4e, 0x6a, 0x94,
	0xff, 0x2a, 0x0a, 0xe6, 0x7f, 0x04, 0xb7, 0x6a, 0xba, 0x1f, 0x5a, 0x1b, 0x85, 0x56, 0xec, 0xa5,
	0x8e, 0x04, 0x27, 0xe2, 0x4a, 0x8b, 0xe3, 0x41, 0x5c, 0x29, 0xf1, 0x33, 0x98, 0x94, 0x07, 0x76,
	0x68, 0xc4, 0xd3, 0x6f, 0xb3, 0x44, 0x2f, 0x3c, 0xd1, 0xbb, 0x4c, 0x4d, 0xca, 0xe5, 0xe3, 0x02,
	0x77, 0x55, 0x8e, 0x33, 0x4e, 0x82, 0x89, 0x4e, 0xa4, 0xc1, 0x86, 0xf8, 0x3f, 0xc1, 0x1d, 0x4e,
	0x11, 0x38, 0x6a, 0xc6, 0x3c, 0xd1, 0xc7, 0x4a, 0x8e, 0xc7, 0x4a, 0xae, 0x8e, 0x8e, 0xf4, 0xd9,
	0x1c, 0x3d, 0x1a, 0xe0, 0x5c, 0x73, 0xcc, 0x5e, 0xb3, 0x93, 0x41, 0x96, 0xcf, 0xd5, 0x56, 0xac,
	0x5e, 0x96, 0xa3, 0xcf, 0xbb, 0x5b, 0x97, 0xba, 0x8f, 0x5e, 0x74, 0x3f, 0xeb, 0x36, 0xbe, 0xd4,
	0xcd, 0x7e, 0x43, 0x37, 0x99, 0xb7, 0xe5, 0x98, 0x65, 0x25, 0xa3, 0x6d, 0xd3, 0xef, 0xcc, 0x95,
	0xe4, 0x8f, 0x04, 0x5b, 0x5b, 0xbd, 0xfe, 0xfe, 0x14, 0x00, 0x00, 0xff, 0xff, 0x06, 0xe5, 0x49,
	0x65, 0xec, 0x02, 0x00, 0x00,
}
