// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cubs_vpn_traffic.proto

package metrics

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VPNTrafficInfo struct {
	ConnInfo  []*VPNConnInfo             `protobuf:"bytes,1,rep,name=conn_info,json=connInfo" json:"conn_info"`
	DeviceSn  string                     `protobuf:"bytes,2,opt,name=device_sn,json=deviceSn" json:"device_sn"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp"`
}

func (m *VPNTrafficInfo) Reset()                    { *m = VPNTrafficInfo{} }
func (m *VPNTrafficInfo) String() string            { return proto.CompactTextString(m) }
func (*VPNTrafficInfo) ProtoMessage()               {}
func (*VPNTrafficInfo) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *VPNTrafficInfo) GetConnInfo() []*VPNConnInfo {
	if m != nil {
		return m.ConnInfo
	}
	return nil
}

func (m *VPNTrafficInfo) GetDeviceSn() string {
	if m != nil {
		return m.DeviceSn
	}
	return ""
}

func (m *VPNTrafficInfo) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type VPNConnInfo struct {
	// @inject_tag: label:"conn_name=?"
	ConnName string `protobuf:"bytes,1,opt,name=conn_name,json=connName" json:"conn_name" label:"conn_name=?"`
	// @inject_tag: label:"direction=ingress"
	Ingress *PacketAndOctetMetrics `protobuf:"bytes,2,opt,name=ingress" json:"ingress" label:"direction=ingress"`
	// @inject_tag: label:"direction=egress"
	Egress *PacketAndOctetMetrics `protobuf:"bytes,3,opt,name=egress" json:"egress" label:"direction=egress"`
}

func (m *VPNConnInfo) Reset()                    { *m = VPNConnInfo{} }
func (m *VPNConnInfo) String() string            { return proto.CompactTextString(m) }
func (*VPNConnInfo) ProtoMessage()               {}
func (*VPNConnInfo) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *VPNConnInfo) GetConnName() string {
	if m != nil {
		return m.ConnName
	}
	return ""
}

func (m *VPNConnInfo) GetIngress() *PacketAndOctetMetrics {
	if m != nil {
		return m.Ingress
	}
	return nil
}

func (m *VPNConnInfo) GetEgress() *PacketAndOctetMetrics {
	if m != nil {
		return m.Egress
	}
	return nil
}

type PacketAndOctetMetrics struct {
	// @inject_tag: labelnames:"conn_name,direction" help:"total packets"
	Packets uint64 `protobuf:"varint,1,opt,name=packets" json:"packets" labelnames:"conn_name,direction" help:"total packets"`
	// @inject_tag: help:"total octets"
	Octets uint64 `protobuf:"varint,2,opt,name=octets" json:"octets" help:"total octets"`
}

func (m *PacketAndOctetMetrics) Reset()                    { *m = PacketAndOctetMetrics{} }
func (m *PacketAndOctetMetrics) String() string            { return proto.CompactTextString(m) }
func (*PacketAndOctetMetrics) ProtoMessage()               {}
func (*PacketAndOctetMetrics) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *PacketAndOctetMetrics) GetPackets() uint64 {
	if m != nil {
		return m.Packets
	}
	return 0
}

func (m *PacketAndOctetMetrics) GetOctets() uint64 {
	if m != nil {
		return m.Octets
	}
	return 0
}

type DropMetrics struct {
	// @inject_tag: labelnames:"conn_name,direction" help:"total drop packets"
	DropPackets uint64 `protobuf:"varint,4,opt,name=drop_packets,json=dropPackets" json:"drop_packets" labelnames:"conn_name,direction" help:"total drop packets"`
}

func (m *DropMetrics) Reset()                    { *m = DropMetrics{} }
func (m *DropMetrics) String() string            { return proto.CompactTextString(m) }
func (*DropMetrics) ProtoMessage()               {}
func (*DropMetrics) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *DropMetrics) GetDropPackets() uint64 {
	if m != nil {
		return m.DropPackets
	}
	return 0
}

func init() {
	proto.RegisterType((*VPNTrafficInfo)(nil), "metrics.VPNTrafficInfo")
	proto.RegisterType((*VPNConnInfo)(nil), "metrics.VPNConnInfo")
	proto.RegisterType((*PacketAndOctetMetrics)(nil), "metrics.PacketAndOctetMetrics")
	proto.RegisterType((*DropMetrics)(nil), "metrics.DropMetrics")
}

func init() { proto.RegisterFile("cubs_vpn_traffic.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x41, 0x4f, 0xc2, 0x30,
	0x14, 0xc7, 0x33, 0x21, 0xc0, 0xde, 0x8c, 0x87, 0x46, 0xc9, 0x82, 0x89, 0xe2, 0x4e, 0x9c, 0x86,
	0x62, 0x62, 0xb8, 0x1a, 0xbd, 0x70, 0x10, 0xc9, 0x24, 0x5c, 0x97, 0x51, 0xba, 0xa5, 0xd1, 0xbd,
	0x36, 0x6d, 0xe1, 0xc3, 0x18, 0x3f, 0xac, 0x59, 0xbb, 0xa2, 0x07, 0x0f, 0xde, 0xf6, 0xfe, 0xfb,
	0xbd, 0xf7, 0xff, 0xa5, 0x30, 0xa4, 0xfb, 0xad, 0xce, 0x0f, 0x12, 0x73, 0xa3, 0x8a, 0xb2, 0xe4,
	0x34, 0x95, 0x4a, 0x18, 0x41, 0xfa, 0x35, 0x33, 0x8a, 0x53, 0x3d, 0xba, 0xae, 0x84, 0xa8, 0x3e,
	0xd8, 0xd4, 0xc6, 0xdb, 0x7d, 0x39, 0x35, 0xbc, 0x66, 0xda, 0x14, 0xb5, 0x74, 0x64, 0xf2, 0x19,
	0xc0, 0xd9, 0x66, 0xb5, 0x5c, 0xbb, 0xf5, 0x05, 0x96, 0x82, 0xdc, 0x41, 0x48, 0x05, 0x62, 0xce,
	0xb1, 0x14, 0x71, 0x30, 0xee, 0x4c, 0xa2, 0xd9, 0x79, 0xda, 0x1e, 0x4c, 0x37, 0xab, 0xe5, 0x93,
	0x40, 0x6c, 0xc0, 0x6c, 0x40, 0xdb, 0x2f, 0x72, 0x09, 0xe1, 0x8e, 0x1d, 0x38, 0x65, 0xb9, 0xc6,
	0xf8, 0x64, 0x1c, 0x4c, 0xc2, 0x6c, 0xe0, 0x82, 0x37, 0x24, 0x73, 0x08, 0x8f, 0xad, 0x71, 0x67,
	0x1c, 0x4c, 0xa2, 0xd9, 0x28, 0x75, 0x5e, 0xa9, 0xf7, 0x4a, 0xd7, 0x9e, 0xc8, 0x7e, 0xe0, 0xe4,
	0x2b, 0x80, 0xe8, 0x57, 0x61, 0x53, 0x63, 0xcd, 0xb0, 0xa8, 0x59, 0x1c, 0xb8, 0x9a, 0x26, 0x58,
	0x16, 0x35, 0x23, 0x73, 0xe8, 0x73, 0xac, 0x14, 0xd3, 0xda, 0x1a, 0x44, 0xb3, 0xab, 0xa3, 0xf4,
	0xaa, 0xa0, 0xef, 0xcc, 0x3c, 0xe2, 0xee, 0x95, 0x1a, 0x66, 0x5e, 0x5c, 0x9a, 0x79, 0x9c, 0x3c,
	0x40, 0x8f, 0xb9, 0xc5, 0xce, 0xbf, 0x16, 0x5b, 0x3a, 0x59, 0xc0, 0xc5, 0x9f, 0x00, 0x89, 0xa1,
	0x2f, 0xed, 0x0f, 0x6d, 0x2d, 0xbb, 0x99, 0x1f, 0xc9, 0x10, 0x7a, 0xa2, 0x21, 0x9d, 0x63, 0x37,
	0x6b, 0xa7, 0xe4, 0x16, 0xa2, 0x67, 0x25, 0xa4, 0x3f, 0x70, 0x03, 0xa7, 0x3b, 0x25, 0x64, 0xee,
	0xaf, 0x74, 0x2d, 0x1c, 0x35, 0x99, 0x6b, 0xd4, 0xdb, 0x9e, 0x7d, 0xba, 0xfb, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x51, 0x7b, 0xf8, 0x0e, 0x03, 0x02, 0x00, 0x00,
}
