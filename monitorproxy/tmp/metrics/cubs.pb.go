// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cubs.proto

package metrics

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cubs service

type CubsClient interface {
	ReportTrafficInfo(ctx context.Context, in *AccumulatedTraffic, opts ...grpc.CallOption) (*Empty, error)
	ReportFlowTrafficInfo(ctx context.Context, in *FlowTrafficInfo, opts ...grpc.CallOption) (*Empty, error)
	ReportLinkQuality(ctx context.Context, in *LinkQuality, opts ...grpc.CallOption) (*Empty, error)
	ReportLiveInfo(ctx context.Context, in *LiveReport, opts ...grpc.CallOption) (*Empty, error)
	ReportVPNTrafficInfo(ctx context.Context, in *VPNTrafficInfo, opts ...grpc.CallOption) (*Empty, error)
	ReportSystemLoad(ctx context.Context, in *SystemLoad, opts ...grpc.CallOption) (*Empty, error)
}

type cubsClient struct {
	cc *grpc.ClientConn
}

func NewCubsClient(cc *grpc.ClientConn) CubsClient {
	return &cubsClient{cc}
}

func (c *cubsClient) ReportTrafficInfo(ctx context.Context, in *AccumulatedTraffic, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/metrics.Cubs/ReportTrafficInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsClient) ReportFlowTrafficInfo(ctx context.Context, in *FlowTrafficInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/metrics.Cubs/ReportFlowTrafficInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsClient) ReportLinkQuality(ctx context.Context, in *LinkQuality, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/metrics.Cubs/ReportLinkQuality", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsClient) ReportLiveInfo(ctx context.Context, in *LiveReport, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/metrics.Cubs/ReportLiveInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsClient) ReportVPNTrafficInfo(ctx context.Context, in *VPNTrafficInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/metrics.Cubs/ReportVPNTrafficInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsClient) ReportSystemLoad(ctx context.Context, in *SystemLoad, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/metrics.Cubs/ReportSystemLoad", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cubs service

type CubsServer interface {
	ReportTrafficInfo(context.Context, *AccumulatedTraffic) (*Empty, error)
	ReportFlowTrafficInfo(context.Context, *FlowTrafficInfo) (*Empty, error)
	ReportLinkQuality(context.Context, *LinkQuality) (*Empty, error)
	ReportLiveInfo(context.Context, *LiveReport) (*Empty, error)
	ReportVPNTrafficInfo(context.Context, *VPNTrafficInfo) (*Empty, error)
	ReportSystemLoad(context.Context, *SystemLoad) (*Empty, error)
}

func RegisterCubsServer(s *grpc.Server, srv CubsServer) {
	s.RegisterService(&_Cubs_serviceDesc, srv)
}

func _Cubs_ReportTrafficInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccumulatedTraffic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsServer).ReportTrafficInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metrics.Cubs/ReportTrafficInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsServer).ReportTrafficInfo(ctx, req.(*AccumulatedTraffic))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cubs_ReportFlowTrafficInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowTrafficInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsServer).ReportFlowTrafficInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metrics.Cubs/ReportFlowTrafficInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsServer).ReportFlowTrafficInfo(ctx, req.(*FlowTrafficInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cubs_ReportLinkQuality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkQuality)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsServer).ReportLinkQuality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metrics.Cubs/ReportLinkQuality",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsServer).ReportLinkQuality(ctx, req.(*LinkQuality))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cubs_ReportLiveInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsServer).ReportLiveInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metrics.Cubs/ReportLiveInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsServer).ReportLiveInfo(ctx, req.(*LiveReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cubs_ReportVPNTrafficInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPNTrafficInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsServer).ReportVPNTrafficInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metrics.Cubs/ReportVPNTrafficInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsServer).ReportVPNTrafficInfo(ctx, req.(*VPNTrafficInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cubs_ReportSystemLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemLoad)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsServer).ReportSystemLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metrics.Cubs/ReportSystemLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsServer).ReportSystemLoad(ctx, req.(*SystemLoad))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cubs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metrics.Cubs",
	HandlerType: (*CubsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportTrafficInfo",
			Handler:    _Cubs_ReportTrafficInfo_Handler,
		},
		{
			MethodName: "ReportFlowTrafficInfo",
			Handler:    _Cubs_ReportFlowTrafficInfo_Handler,
		},
		{
			MethodName: "ReportLinkQuality",
			Handler:    _Cubs_ReportLinkQuality_Handler,
		},
		{
			MethodName: "ReportLiveInfo",
			Handler:    _Cubs_ReportLiveInfo_Handler,
		},
		{
			MethodName: "ReportVPNTrafficInfo",
			Handler:    _Cubs_ReportVPNTrafficInfo_Handler,
		},
		{
			MethodName: "ReportSystemLoad",
			Handler:    _Cubs_ReportSystemLoad_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cubs.proto",
}

func init() { proto.RegisterFile("cubs.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x4b, 0x4b, 0xc4, 0x30,
	0x1c, 0xc4, 0x05, 0x45, 0x21, 0xc8, 0xe2, 0xc6, 0xf5, 0x41, 0xf5, 0xe4, 0x07, 0xe8, 0x41, 0x0f,
	0x22, 0x9e, 0xd6, 0x45, 0x41, 0x58, 0xc4, 0x17, 0x5e, 0x4b, 0x9a, 0xfe, 0x0b, 0x61, 0xf3, 0x32,
	0x8f, 0x4a, 0xcf, 0x7e, 0x71, 0x31, 0xe9, 0x76, 0x53, 0xed, 0x75, 0x66, 0x7e, 0xf3, 0x9f, 0x36,
	0x08, 0x51, 0x5f, 0xda, 0x5c, 0x1b, 0xe5, 0x14, 0xde, 0x13, 0xe0, 0x0c, 0xa3, 0x36, 0xdb, 0xa7,
	0x4a, 0x08, 0x25, 0xa3, 0x9c, 0x9d, 0xff, 0x46, 0x0a, 0x0d, 0x86, 0xa9, 0x8a, 0x51, 0xc2, 0x0b,
	0x03, 0x5a, 0x19, 0xd7, 0xb9, 0xc7, 0xc1, 0xe5, 0x4c, 0xae, 0x3e, 0x3d, 0xe1, 0xcc, 0xb5, 0x03,
	0x8a, 0x49, 0x07, 0xa6, 0x26, 0x14, 0x0a, 0xce, 0x1a, 0xd8, 0x74, 0x46, 0xaa, 0xd1, 0xb2, 0x70,
	0x86, 0xd4, 0x35, 0xa3, 0x9d, 0x3e, 0x0d, 0xba, 0x6d, 0xad, 0x03, 0x11, 0xa5, 0xcb, 0xef, 0x6d,
	0xb4, 0xb3, 0xf0, 0xa5, 0xc5, 0x77, 0x68, 0xfa, 0x1a, 0x2e, 0xbf, 0x47, 0xe4, 0x51, 0xd6, 0x0a,
	0x9f, 0xe5, 0xdd, 0xe8, 0x7c, 0x4e, 0xa9, 0x17, 0x9e, 0x13, 0x07, 0x55, 0x17, 0xc8, 0x26, 0xbd,
	0x79, 0x2f, 0xb4, 0x6b, 0x2f, 0xb6, 0xf0, 0x02, 0x1d, 0xc5, 0x8e, 0x07, 0xae, 0xbe, 0xd2, 0x9e,
	0xd3, 0x3e, 0xfa, 0xc7, 0x19, 0x29, 0xb9, 0x5d, 0x0f, 0x59, 0x32, 0xb9, 0x7a, 0x89, 0x5f, 0x8d,
	0x67, 0x7d, 0x2c, 0x51, 0x47, 0xe0, 0x6b, 0x34, 0x59, 0xc3, 0x0d, 0x84, 0xd3, 0x87, 0x09, 0xd9,
	0x40, 0x34, 0x47, 0xc0, 0x39, 0x9a, 0x45, 0xef, 0xe3, 0xf9, 0x29, 0x5d, 0x7e, 0xd2, 0x27, 0x87,
	0xc6, 0x48, 0xc5, 0x0d, 0x3a, 0x88, 0x15, 0x6f, 0xe1, 0x07, 0x2f, 0x15, 0xa9, 0x92, 0xeb, 0x1b,
	0xf1, 0x3f, 0x5a, 0xee, 0x86, 0xc7, 0xb8, 0xfa, 0x09, 0x00, 0x00, 0xff, 0xff, 0x49, 0x71, 0x85,
	0x80, 0x30, 0x02, 0x00, 0x00,
}
