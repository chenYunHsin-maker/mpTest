// Code generated by protoc-gen-go. DO NOT EDIT.
// source: system.proto

package events

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FirmwareDownloaded struct {
	Success      bool                       `protobuf:"varint,1,opt,name=success" json:"success"`
	TaskId       string                     `protobuf:"bytes,2,opt,name=task_id,json=taskId" json:"task_id"`
	ErrorCode    uint32                     `protobuf:"varint,3,opt,name=error_code,json=errorCode" json:"error_code"`
	ReplyMessage string                     `protobuf:"bytes,4,opt,name=reply_message,json=replyMessage" json:"reply_message"`
	DeviceSn     string                     `protobuf:"bytes,5,opt,name=device_sn,json=deviceSn" json:"device_sn"`
	Timestamp    *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=timestamp" json:"timestamp"`
}

func (m *FirmwareDownloaded) Reset()                    { *m = FirmwareDownloaded{} }
func (m *FirmwareDownloaded) String() string            { return proto.CompactTextString(m) }
func (*FirmwareDownloaded) ProtoMessage()               {}
func (*FirmwareDownloaded) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

func (m *FirmwareDownloaded) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *FirmwareDownloaded) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *FirmwareDownloaded) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *FirmwareDownloaded) GetReplyMessage() string {
	if m != nil {
		return m.ReplyMessage
	}
	return ""
}

func (m *FirmwareDownloaded) GetDeviceSn() string {
	if m != nil {
		return m.DeviceSn
	}
	return ""
}

func (m *FirmwareDownloaded) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type FirmwareDownloadProcess struct {
	TaskId         string                     `protobuf:"bytes,1,opt,name=task_id,json=taskId" json:"task_id"`
	StartAt        uint64                     `protobuf:"varint,2,opt,name=start_at,json=startAt" json:"start_at"`
	DownloadedSize uint32                     `protobuf:"varint,3,opt,name=downloaded_size,json=downloadedSize" json:"downloaded_size"`
	ExpectedSize   uint32                     `protobuf:"varint,4,opt,name=expected_size,json=expectedSize" json:"expected_size"`
	DeviceSn       string                     `protobuf:"bytes,5,opt,name=device_sn,json=deviceSn" json:"device_sn"`
	Timestamp      *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=timestamp" json:"timestamp"`
}

func (m *FirmwareDownloadProcess) Reset()                    { *m = FirmwareDownloadProcess{} }
func (m *FirmwareDownloadProcess) String() string            { return proto.CompactTextString(m) }
func (*FirmwareDownloadProcess) ProtoMessage()               {}
func (*FirmwareDownloadProcess) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{1} }

func (m *FirmwareDownloadProcess) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *FirmwareDownloadProcess) GetStartAt() uint64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *FirmwareDownloadProcess) GetDownloadedSize() uint32 {
	if m != nil {
		return m.DownloadedSize
	}
	return 0
}

func (m *FirmwareDownloadProcess) GetExpectedSize() uint32 {
	if m != nil {
		return m.ExpectedSize
	}
	return 0
}

func (m *FirmwareDownloadProcess) GetDeviceSn() string {
	if m != nil {
		return m.DeviceSn
	}
	return ""
}

func (m *FirmwareDownloadProcess) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type FirmwareUpgradeStarted struct {
	TaskId       string                     `protobuf:"bytes,1,opt,name=task_id,json=taskId" json:"task_id"`
	Version      string                     `protobuf:"bytes,2,opt,name=version" json:"version"`
	Model        string                     `protobuf:"bytes,3,opt,name=model" json:"model"`
	Checksum     string                     `protobuf:"bytes,4,opt,name=checksum" json:"checksum"`
	ReplyMessage string                     `protobuf:"bytes,5,opt,name=reply_message,json=replyMessage" json:"reply_message"`
	DeviceSn     string                     `protobuf:"bytes,6,opt,name=device_sn,json=deviceSn" json:"device_sn"`
	Timestamp    *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=timestamp" json:"timestamp"`
}

func (m *FirmwareUpgradeStarted) Reset()                    { *m = FirmwareUpgradeStarted{} }
func (m *FirmwareUpgradeStarted) String() string            { return proto.CompactTextString(m) }
func (*FirmwareUpgradeStarted) ProtoMessage()               {}
func (*FirmwareUpgradeStarted) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{2} }

func (m *FirmwareUpgradeStarted) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *FirmwareUpgradeStarted) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *FirmwareUpgradeStarted) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *FirmwareUpgradeStarted) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

func (m *FirmwareUpgradeStarted) GetReplyMessage() string {
	if m != nil {
		return m.ReplyMessage
	}
	return ""
}

func (m *FirmwareUpgradeStarted) GetDeviceSn() string {
	if m != nil {
		return m.DeviceSn
	}
	return ""
}

func (m *FirmwareUpgradeStarted) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type SystemAlertMessage struct {
	DeviceSn      string                     `protobuf:"bytes,1,opt,name=device_sn,json=deviceSn" json:"device_sn"`
	Timestamp     *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp"`
	AlertCategory string                     `protobuf:"bytes,3,opt,name=alert_category,json=alertCategory" json:"alert_category"`
	AlertSeverity string                     `protobuf:"bytes,4,opt,name=alert_severity,json=alertSeverity" json:"alert_severity"`
	AlertMessage  string                     `protobuf:"bytes,5,opt,name=alert_message,json=alertMessage" json:"alert_message"`
}

func (m *SystemAlertMessage) Reset()                    { *m = SystemAlertMessage{} }
func (m *SystemAlertMessage) String() string            { return proto.CompactTextString(m) }
func (*SystemAlertMessage) ProtoMessage()               {}
func (*SystemAlertMessage) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{3} }

func (m *SystemAlertMessage) GetDeviceSn() string {
	if m != nil {
		return m.DeviceSn
	}
	return ""
}

func (m *SystemAlertMessage) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *SystemAlertMessage) GetAlertCategory() string {
	if m != nil {
		return m.AlertCategory
	}
	return ""
}

func (m *SystemAlertMessage) GetAlertSeverity() string {
	if m != nil {
		return m.AlertSeverity
	}
	return ""
}

func (m *SystemAlertMessage) GetAlertMessage() string {
	if m != nil {
		return m.AlertMessage
	}
	return ""
}

type PackageUpgradeStartMessage struct {
	DeviceSn     string                     `protobuf:"bytes,1,opt,name=device_sn,json=deviceSn" json:"device_sn"`
	Timestamp    *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp"`
	PackageName  string                     `protobuf:"bytes,3,opt,name=package_name,json=packageName" json:"package_name"`
	TaskId       string                     `protobuf:"bytes,4,opt,name=task_id,json=taskId" json:"task_id"`
	Success      bool                       `protobuf:"varint,5,opt,name=success" json:"success"`
	ReplyCode    uint32                     `protobuf:"varint,6,opt,name=reply_code,json=replyCode" json:"reply_code"`
	ReplyMessage string                     `protobuf:"bytes,7,opt,name=reply_message,json=replyMessage" json:"reply_message"`
}

func (m *PackageUpgradeStartMessage) Reset()                    { *m = PackageUpgradeStartMessage{} }
func (m *PackageUpgradeStartMessage) String() string            { return proto.CompactTextString(m) }
func (*PackageUpgradeStartMessage) ProtoMessage()               {}
func (*PackageUpgradeStartMessage) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{4} }

func (m *PackageUpgradeStartMessage) GetDeviceSn() string {
	if m != nil {
		return m.DeviceSn
	}
	return ""
}

func (m *PackageUpgradeStartMessage) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *PackageUpgradeStartMessage) GetPackageName() string {
	if m != nil {
		return m.PackageName
	}
	return ""
}

func (m *PackageUpgradeStartMessage) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *PackageUpgradeStartMessage) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PackageUpgradeStartMessage) GetReplyCode() uint32 {
	if m != nil {
		return m.ReplyCode
	}
	return 0
}

func (m *PackageUpgradeStartMessage) GetReplyMessage() string {
	if m != nil {
		return m.ReplyMessage
	}
	return ""
}

type PackageUpgradeResultMessage struct {
	DeviceSn     string                     `protobuf:"bytes,1,opt,name=device_sn,json=deviceSn" json:"device_sn"`
	Timestamp    *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp"`
	PackageName  string                     `protobuf:"bytes,3,opt,name=package_name,json=packageName" json:"package_name"`
	Success      bool                       `protobuf:"varint,4,opt,name=success" json:"success"`
	ReplyCode    uint32                     `protobuf:"varint,5,opt,name=reply_code,json=replyCode" json:"reply_code"`
	ReplyMessage string                     `protobuf:"bytes,6,opt,name=reply_message,json=replyMessage" json:"reply_message"`
	Version      string                     `protobuf:"bytes,7,opt,name=version" json:"version"`
}

func (m *PackageUpgradeResultMessage) Reset()                    { *m = PackageUpgradeResultMessage{} }
func (m *PackageUpgradeResultMessage) String() string            { return proto.CompactTextString(m) }
func (*PackageUpgradeResultMessage) ProtoMessage()               {}
func (*PackageUpgradeResultMessage) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{5} }

func (m *PackageUpgradeResultMessage) GetDeviceSn() string {
	if m != nil {
		return m.DeviceSn
	}
	return ""
}

func (m *PackageUpgradeResultMessage) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *PackageUpgradeResultMessage) GetPackageName() string {
	if m != nil {
		return m.PackageName
	}
	return ""
}

func (m *PackageUpgradeResultMessage) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PackageUpgradeResultMessage) GetReplyCode() uint32 {
	if m != nil {
		return m.ReplyCode
	}
	return 0
}

func (m *PackageUpgradeResultMessage) GetReplyMessage() string {
	if m != nil {
		return m.ReplyMessage
	}
	return ""
}

func (m *PackageUpgradeResultMessage) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type DiskLogUploadMessage struct {
	DeviceSn   string                     `protobuf:"bytes,1,opt,name=device_sn,json=deviceSn" json:"device_sn"`
	Timestamp  *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp"`
	FileName   []string                   `protobuf:"bytes,3,rep,name=file_name,json=fileName" json:"file_name"`
	TaskId     string                     `protobuf:"bytes,4,opt,name=task_id,json=taskId" json:"task_id"`
	UploadDone bool                       `protobuf:"varint,5,opt,name=upload_done,json=uploadDone" json:"upload_done"`
}

func (m *DiskLogUploadMessage) Reset()                    { *m = DiskLogUploadMessage{} }
func (m *DiskLogUploadMessage) String() string            { return proto.CompactTextString(m) }
func (*DiskLogUploadMessage) ProtoMessage()               {}
func (*DiskLogUploadMessage) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{6} }

func (m *DiskLogUploadMessage) GetDeviceSn() string {
	if m != nil {
		return m.DeviceSn
	}
	return ""
}

func (m *DiskLogUploadMessage) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *DiskLogUploadMessage) GetFileName() []string {
	if m != nil {
		return m.FileName
	}
	return nil
}

func (m *DiskLogUploadMessage) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *DiskLogUploadMessage) GetUploadDone() bool {
	if m != nil {
		return m.UploadDone
	}
	return false
}

func init() {
	proto.RegisterType((*FirmwareDownloaded)(nil), "events.FirmwareDownloaded")
	proto.RegisterType((*FirmwareDownloadProcess)(nil), "events.FirmwareDownloadProcess")
	proto.RegisterType((*FirmwareUpgradeStarted)(nil), "events.FirmwareUpgradeStarted")
	proto.RegisterType((*SystemAlertMessage)(nil), "events.SystemAlertMessage")
	proto.RegisterType((*PackageUpgradeStartMessage)(nil), "events.PackageUpgradeStartMessage")
	proto.RegisterType((*PackageUpgradeResultMessage)(nil), "events.PackageUpgradeResultMessage")
	proto.RegisterType((*DiskLogUploadMessage)(nil), "events.DiskLogUploadMessage")
}

func init() { proto.RegisterFile("system.proto", fileDescriptor15) }

var fileDescriptor15 = []byte{
	// 582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xb5, 0x69, 0x62, 0xc7, 0xd3, 0xb4, 0x48, 0xab, 0x8a, 0x9a, 0x44, 0x55, 0x43, 0x10,
	0x22, 0xa7, 0x54, 0x82, 0x0b, 0xd7, 0xaa, 0x11, 0x12, 0x12, 0xa0, 0xca, 0xa1, 0x67, 0x6b, 0xeb,
	0x9d, 0x1a, 0x2b, 0xb6, 0xd7, 0xda, 0xdd, 0xa4, 0xa4, 0xef, 0x80, 0x78, 0x29, 0x9e, 0x83, 0x03,
	0x8f, 0xc0, 0x8d, 0x1b, 0xf2, 0xda, 0xce, 0xbf, 0x86, 0x54, 0x3d, 0x44, 0xe2, 0x38, 0x9f, 0xbe,
	0x64, 0xfc, 0xfb, 0x66, 0x76, 0xa0, 0xa5, 0x66, 0x4a, 0x63, 0x32, 0xc8, 0xa4, 0xd0, 0x82, 0x5a,
	0x38, 0xc5, 0x54, 0xab, 0xf6, 0x69, 0x28, 0x44, 0x18, 0xe3, 0x99, 0x51, 0xaf, 0x27, 0x37, 0x67,
	0x3a, 0x4a, 0x50, 0x69, 0x96, 0x64, 0x85, 0xb1, 0xf7, 0x8b, 0x00, 0x7d, 0x17, 0xc9, 0xe4, 0x96,
	0x49, 0x1c, 0x8a, 0xdb, 0x34, 0x16, 0x8c, 0x23, 0xa7, 0x2e, 0xd8, 0x6a, 0x12, 0x04, 0xa8, 0x94,
	0x4b, 0xba, 0xa4, 0xdf, 0xf4, 0xaa, 0x92, 0x1e, 0x83, 0xad, 0x99, 0x1a, 0xfb, 0x11, 0x77, 0x6b,
	0x5d, 0xd2, 0x77, 0x3c, 0x2b, 0x2f, 0xdf, 0x73, 0x7a, 0x02, 0x80, 0x52, 0x0a, 0xe9, 0x07, 0x82,
	0xa3, 0xbb, 0xd7, 0x25, 0xfd, 0x03, 0xcf, 0x31, 0xca, 0x85, 0xe0, 0x48, 0x5f, 0xc0, 0x81, 0xc4,
	0x2c, 0x9e, 0xf9, 0x09, 0x2a, 0xc5, 0x42, 0x74, 0xeb, 0xe6, 0xd7, 0x2d, 0x23, 0x7e, 0x2c, 0x34,
	0xda, 0x01, 0x87, 0xe3, 0x34, 0x0a, 0xd0, 0x57, 0xa9, 0xdb, 0x30, 0x86, 0x66, 0x21, 0x8c, 0x52,
	0xfa, 0x16, 0x9c, 0xf9, 0xd7, 0xbb, 0x56, 0x97, 0xf4, 0xf7, 0x5f, 0xb7, 0x07, 0x05, 0xdf, 0xa0,
	0xe2, 0x1b, 0x7c, 0xae, 0x1c, 0xde, 0xc2, 0xdc, 0xfb, 0x4d, 0xe0, 0x78, 0x1d, 0xf2, 0x52, 0x8a,
	0x75, 0x1e, 0xb2, 0xc2, 0xf3, 0x0c, 0x9a, 0x4a, 0x33, 0xa9, 0x7d, 0xa6, 0x0d, 0x69, 0xdd, 0xb3,
	0x4d, 0x7d, 0xae, 0xe9, 0x2b, 0x78, 0xc2, 0xe7, 0x59, 0xf9, 0x2a, 0xba, 0xab, 0x78, 0x0f, 0x17,
	0xf2, 0x28, 0xba, 0x33, 0xd0, 0xf8, 0x35, 0xc3, 0x40, 0x57, 0xb6, 0xba, 0xb1, 0xb5, 0x2a, 0xd1,
	0x98, 0x76, 0x04, 0xfd, 0x87, 0xc0, 0xd3, 0x0a, 0xfa, 0x2a, 0x0b, 0x25, 0xe3, 0x38, 0xca, 0xbf,
	0x1f, 0xf9, 0xbf, 0x99, 0x5d, 0xb0, 0xa7, 0x28, 0x55, 0x24, 0xd2, 0x72, 0xb8, 0x55, 0x49, 0x8f,
	0xa0, 0x91, 0x08, 0x8e, 0xb1, 0x01, 0x75, 0xbc, 0xa2, 0xa0, 0x6d, 0x68, 0x06, 0x5f, 0x30, 0x18,
	0xab, 0x49, 0x52, 0xce, 0x73, 0x5e, 0xdf, 0x1f, 0x78, 0xe3, 0xa1, 0x81, 0x5b, 0xdb, 0xd8, 0xed,
	0xc7, 0xb0, 0xff, 0x24, 0x40, 0x47, 0xe6, 0x3d, 0x9c, 0xc7, 0x28, 0xf5, 0xc6, 0x6e, 0x64, 0x5b,
	0xb7, 0xda, 0x23, 0xba, 0xd1, 0x97, 0x70, 0xc8, 0xf2, 0x36, 0x7e, 0xc0, 0x34, 0x86, 0x42, 0xce,
	0xca, 0x90, 0x0e, 0x8c, 0x7a, 0x51, 0x8a, 0x0b, 0x9b, 0xc2, 0x29, 0xca, 0x48, 0xcf, 0xca, 0xc8,
	0x0a, 0xdb, 0xa8, 0x14, 0xf3, 0xdc, 0x0a, 0xdb, 0x5a, 0x6e, 0x6c, 0x89, 0xa4, 0xf7, 0xad, 0x06,
	0xed, 0x4b, 0x16, 0x8c, 0x59, 0xb8, 0x32, 0xdb, 0x1d, 0x83, 0x3e, 0x87, 0x56, 0x56, 0x34, 0xf5,
	0x53, 0x96, 0x60, 0x89, 0xb9, 0x5f, 0x6a, 0x9f, 0x58, 0x82, 0xcb, 0xab, 0x55, 0x5f, 0x5f, 0xad,
	0xea, 0xa2, 0x34, 0x56, 0x2f, 0xca, 0x09, 0x40, 0xb1, 0x28, 0xe6, 0x70, 0x58, 0xc5, 0xe1, 0x30,
	0xca, 0xe6, 0xc3, 0x61, 0xdf, 0xdf, 0xa3, 0xde, 0xf7, 0x1a, 0x74, 0x56, 0xf3, 0xf0, 0x50, 0x4d,
	0xe2, 0xff, 0x20, 0x90, 0x25, 0xee, 0xfa, 0x36, 0xee, 0xc6, 0x83, 0xdc, 0xd6, 0x86, 0xf7, 0xb3,
	0xf4, 0x60, 0xed, 0x95, 0x07, 0xdb, 0xfb, 0x41, 0xe0, 0x68, 0x18, 0xa9, 0xf1, 0x07, 0x11, 0x5e,
	0x65, 0xf9, 0x49, 0xda, 0x71, 0x14, 0x1d, 0x70, 0x6e, 0xa2, 0x78, 0x9e, 0xc3, 0x5e, 0xfe, 0xb7,
	0xb9, 0xb0, 0x7d, 0x2b, 0x4e, 0x61, 0x7f, 0x62, 0xbe, 0xce, 0xe7, 0x22, 0xc5, 0x72, 0x33, 0xa0,
	0x90, 0x86, 0x22, 0xc5, 0x6b, 0xcb, 0x74, 0x7d, 0xf3, 0x37, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xcf,
	0x9f, 0x2d, 0xdf, 0x06, 0x00, 0x00,
}
