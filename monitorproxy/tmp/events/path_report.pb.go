// Code generated by protoc-gen-go. DO NOT EDIT.
// source: path_report.proto

package events

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ListPathReport struct {
	TaskId    string                     `protobuf:"bytes,1,opt,name=task_id,json=taskId" json:"task_id"`
	Success   bool                       `protobuf:"varint,2,opt,name=success" json:"success"`
	Result    string                     `protobuf:"bytes,3,opt,name=result" json:"result"`
	DeviceSn  string                     `protobuf:"bytes,4,opt,name=device_sn,json=deviceSn" json:"device_sn"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=timestamp" json:"timestamp"`
}

func (m *ListPathReport) Reset()                    { *m = ListPathReport{} }
func (m *ListPathReport) String() string            { return proto.CompactTextString(m) }
func (*ListPathReport) ProtoMessage()               {}
func (*ListPathReport) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{0} }

func (m *ListPathReport) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *ListPathReport) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ListPathReport) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *ListPathReport) GetDeviceSn() string {
	if m != nil {
		return m.DeviceSn
	}
	return ""
}

func (m *ListPathReport) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func init() {
	proto.RegisterType((*ListPathReport)(nil), "events.ListPathReport")
}

func init() { proto.RegisterFile("path_report.proto", fileDescriptor11) }

var fileDescriptor11 = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8e, 0xcd, 0x4a, 0xc4, 0x30,
	0x14, 0x85, 0x89, 0x3f, 0x99, 0x69, 0x04, 0xc1, 0x2c, 0x34, 0x8c, 0x0b, 0x8b, 0xab, 0xae, 0x32,
	0xa0, 0x1b, 0x5f, 0x41, 0x70, 0x21, 0xd1, 0x7d, 0x49, 0xdb, 0x6b, 0x1b, 0x6c, 0x9b, 0x90, 0x7b,
	0xdb, 0x07, 0xf3, 0x09, 0xc5, 0x84, 0x3a, 0xcb, 0x73, 0xce, 0x77, 0x2f, 0x9f, 0xb8, 0x09, 0x96,
	0x86, 0x3a, 0x42, 0xf0, 0x91, 0x74, 0x88, 0x9e, 0xbc, 0xe4, 0xb0, 0xc2, 0x4c, 0x78, 0x78, 0xe8,
	0xbd, 0xef, 0x47, 0x38, 0xa6, 0xb6, 0x59, 0xbe, 0x8e, 0xe4, 0x26, 0x40, 0xb2, 0x53, 0xc8, 0xe0,
	0xe3, 0x0f, 0x13, 0xd7, 0x6f, 0x0e, 0xe9, 0xdd, 0xd2, 0x60, 0xd2, 0x07, 0x79, 0x27, 0x76, 0x64,
	0xf1, 0xbb, 0x76, 0x9d, 0x62, 0x25, 0xab, 0x0a, 0xc3, 0xff, 0xe2, 0x6b, 0x27, 0x95, 0xd8, 0xe1,
	0xd2, 0xb6, 0x80, 0xa8, 0xce, 0x4a, 0x56, 0xed, 0xcd, 0x16, 0xe5, 0xad, 0xe0, 0x11, 0x70, 0x19,
	0x49, 0x9d, 0xe7, 0x8b, 0x9c, 0xe4, 0xbd, 0x28, 0x3a, 0x58, 0x5d, 0x0b, 0x35, 0xce, 0xea, 0x22,
	0x4d, 0xfb, 0x5c, 0x7c, 0xcc, 0xf2, 0x45, 0x14, 0xff, 0x36, 0xea, 0xb2, 0x64, 0xd5, 0xd5, 0xd3,
	0x41, 0x67, 0x5f, 0xbd, 0xf9, 0xea, 0xcf, 0x8d, 0x30, 0x27, 0xb8, 0xe1, 0x69, 0x7e, 0xfe, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0x55, 0xaa, 0x49, 0x04, 0xf9, 0x00, 0x00, 0x00,
}
