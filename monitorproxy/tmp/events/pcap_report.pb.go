// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pcap_report.proto

package events

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PacketCaptureReport struct {
	PcapTask  string                     `protobuf:"bytes,1,opt,name=pcap_task,json=pcapTask" json:"pcap_task"`
	Data      string                     `protobuf:"bytes,2,opt,name=data" json:"data"`
	DeviceSn  string                     `protobuf:"bytes,3,opt,name=device_sn,json=deviceSn" json:"device_sn"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp"`
}

func (m *PacketCaptureReport) Reset()                    { *m = PacketCaptureReport{} }
func (m *PacketCaptureReport) String() string            { return proto.CompactTextString(m) }
func (*PacketCaptureReport) ProtoMessage()               {}
func (*PacketCaptureReport) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

func (m *PacketCaptureReport) GetPcapTask() string {
	if m != nil {
		return m.PcapTask
	}
	return ""
}

func (m *PacketCaptureReport) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *PacketCaptureReport) GetDeviceSn() string {
	if m != nil {
		return m.DeviceSn
	}
	return ""
}

func (m *PacketCaptureReport) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type PacketCaptureUploadedMessage struct {
	DeviceSn  string                     `protobuf:"bytes,1,opt,name=device_sn,json=deviceSn" json:"device_sn"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp"`
	PcapTask  string                     `protobuf:"bytes,3,opt,name=pcap_task,json=pcapTask" json:"pcap_task"`
	Success   bool                       `protobuf:"varint,4,opt,name=success" json:"success"`
	Message   string                     `protobuf:"bytes,5,opt,name=message" json:"message"`
}

func (m *PacketCaptureUploadedMessage) Reset()                    { *m = PacketCaptureUploadedMessage{} }
func (m *PacketCaptureUploadedMessage) String() string            { return proto.CompactTextString(m) }
func (*PacketCaptureUploadedMessage) ProtoMessage()               {}
func (*PacketCaptureUploadedMessage) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{1} }

func (m *PacketCaptureUploadedMessage) GetDeviceSn() string {
	if m != nil {
		return m.DeviceSn
	}
	return ""
}

func (m *PacketCaptureUploadedMessage) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *PacketCaptureUploadedMessage) GetPcapTask() string {
	if m != nil {
		return m.PcapTask
	}
	return ""
}

func (m *PacketCaptureUploadedMessage) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PacketCaptureUploadedMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*PacketCaptureReport)(nil), "events.PacketCaptureReport")
	proto.RegisterType((*PacketCaptureUploadedMessage)(nil), "events.PacketCaptureUploadedMessage")
}

func init() { proto.RegisterFile("pcap_report.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x8f, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0xe5, 0xb6, 0x94, 0xc6, 0x4c, 0x98, 0xc5, 0x2a, 0x48, 0x54, 0x9d, 0x3a, 0xa5, 0x12,
	0x2c, 0xec, 0xcc, 0x48, 0x28, 0x94, 0xb9, 0xba, 0x3a, 0x47, 0x54, 0xa5, 0x89, 0xad, 0xdc, 0x25,
	0xff, 0x86, 0xbf, 0xc3, 0xef, 0x42, 0x39, 0x2b, 0xa0, 0x30, 0x20, 0x75, 0xf3, 0x3d, 0xdf, 0xbb,
	0xef, 0x3d, 0x7d, 0x1d, 0x1c, 0x84, 0x7d, 0x83, 0xc1, 0x37, 0x9c, 0x86, 0xc6, 0xb3, 0x37, 0x73,
	0xec, 0xb0, 0x66, 0x5a, 0xde, 0x17, 0xde, 0x17, 0x27, 0xdc, 0x8a, 0x7a, 0x68, 0x3f, 0xb6, 0x7c,
	0xac, 0x90, 0x18, 0xaa, 0x10, 0x17, 0xd7, 0x9f, 0x4a, 0xdf, 0xbc, 0x82, 0x2b, 0x91, 0x9f, 0x21,
	0x70, 0xdb, 0x60, 0x26, 0x67, 0xcc, 0xad, 0x4e, 0xe4, 0x2a, 0x03, 0x95, 0x56, 0xad, 0xd4, 0x26,
	0xc9, 0x16, 0xbd, 0xb0, 0x03, 0x2a, 0x8d, 0xd1, 0xb3, 0x1c, 0x18, 0xec, 0x44, 0x74, 0x79, 0xf7,
	0x86, 0x1c, 0xbb, 0xa3, 0xc3, 0x3d, 0xd5, 0x76, 0x1a, 0x0d, 0x51, 0x78, 0xab, 0xcd, 0x93, 0x4e,
	0x7e, 0xc0, 0x76, 0xb6, 0x52, 0x9b, 0xab, 0x87, 0x65, 0x1a, 0xa3, 0xa5, 0x43, 0xb4, 0x74, 0x37,
	0x6c, 0x64, 0xbf, 0xcb, 0xeb, 0x2f, 0xa5, 0xef, 0x46, 0xf9, 0xde, 0xc3, 0xc9, 0x43, 0x8e, 0xf9,
	0x0b, 0x12, 0x41, 0x81, 0x63, 0xae, 0xfa, 0x8f, 0x3b, 0x39, 0x83, 0x3b, 0xee, 0x3f, 0xfd, 0xd3,
	0xdf, 0xea, 0x4b, 0x6a, 0x9d, 0x43, 0x22, 0x29, 0xb3, 0xc8, 0x86, 0xb1, 0xff, 0xa9, 0x62, 0x30,
	0x7b, 0x21, 0xa6, 0x61, 0x3c, 0xcc, 0x85, 0xf7, 0xf8, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x7b, 0x54,
	0x7a, 0x34, 0xad, 0x01, 0x00, 0x00,
}
