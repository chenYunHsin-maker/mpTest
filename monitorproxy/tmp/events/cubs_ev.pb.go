// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cubs_ev.proto

package events

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func init() {
	proto.RegisterType((*Empty)(nil), "events.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CubsEventReport service

type CubsEventReportClient interface {
	// client
	ClientInfoUpdate(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*Empty, error)
	ClientTimeout(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*Empty, error)
	UserLogin(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Empty, error)
	UserLogout(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Empty, error)
	// interfaces
	IPChanged(ctx context.Context, in *Interfaces, opts ...grpc.CallOption) (*Empty, error)
	InterfaceStatusChange(ctx context.Context, in *Interfaces, opts ...grpc.CallOption) (*Empty, error)
	LivemonStopped(ctx context.Context, in *Interface, opts ...grpc.CallOption) (*Empty, error)
	LinkStateChange(ctx context.Context, in *Interfaces, opts ...grpc.CallOption) (*Empty, error)
	PortStateChange(ctx context.Context, in *Ports, opts ...grpc.CallOption) (*Empty, error)
	// system
	FirmwareDownloadDone(ctx context.Context, in *FirmwareDownloaded, opts ...grpc.CallOption) (*Empty, error)
	FirmwareDownloadReport(ctx context.Context, in *FirmwareDownloadProcess, opts ...grpc.CallOption) (*Empty, error)
	FirmwareUpgradeStart(ctx context.Context, in *FirmwareUpgradeStarted, opts ...grpc.CallOption) (*Empty, error)
	SystemAlert(ctx context.Context, in *SystemAlertMessage, opts ...grpc.CallOption) (*Empty, error)
	PackageUpgradeStart(ctx context.Context, in *PackageUpgradeStartMessage, opts ...grpc.CallOption) (*Empty, error)
	PackageUpgradeResult(ctx context.Context, in *PackageUpgradeResultMessage, opts ...grpc.CallOption) (*Empty, error)
	DiskLogUpload(ctx context.Context, in *DiskLogUploadMessage, opts ...grpc.CallOption) (*Empty, error)
	// usb
	USBDeviceDetected(ctx context.Context, in *USBDeviceInfo, opts ...grpc.CallOption) (*Empty, error)
	USBDeviceRemoved(ctx context.Context, in *USBDeviceInfo, opts ...grpc.CallOption) (*Empty, error)
	// vpn
	VPNTestDone(ctx context.Context, in *VPNTestResult, opts ...grpc.CallOption) (*Empty, error)
	OnVPNEvent(ctx context.Context, in *VPNEvent, opts ...grpc.CallOption) (*Empty, error)
	// debug-tun
	TunnelEstablished(ctx context.Context, in *DebugTunnelInfo, opts ...grpc.CallOption) (*Empty, error)
	TunnelDisconnected(ctx context.Context, in *DebugTunnelInfo, opts ...grpc.CallOption) (*Empty, error)
	// debug-runcmd
	CommandExecuted(ctx context.Context, in *DebugCommand, opts ...grpc.CallOption) (*Empty, error)
	// ping done
	PingDone(ctx context.Context, in *PingReport, opts ...grpc.CallOption) (*Empty, error)
	// traceroute done
	TracerouteDone(ctx context.Context, in *TracerouteReport, opts ...grpc.CallOption) (*Empty, error)
	// dns query done
	DNSQueryDone(ctx context.Context, in *DNSReport, opts ...grpc.CallOption) (*Empty, error)
	// pcap stop
	PacketCaptureStopped(ctx context.Context, in *PacketCaptureReport, opts ...grpc.CallOption) (*Empty, error)
	PacketCaptureUploaded(ctx context.Context, in *PacketCaptureUploadedMessage, opts ...grpc.CallOption) (*Empty, error)
	// list-path-done
	ListPathDone(ctx context.Context, in *ListPathReport, opts ...grpc.CallOption) (*Empty, error)
	// syslog
	ReportDeviceLog(ctx context.Context, opts ...grpc.CallOption) (CubsEventReport_ReportDeviceLogClient, error)
	// dns
	ReportDNSAnswer(ctx context.Context, opts ...grpc.CallOption) (CubsEventReport_ReportDNSAnswerClient, error)
	// arp
	ReportARPTable(ctx context.Context, in *ARPTable, opts ...grpc.CallOption) (*Empty, error)
	// debug-wanopt
	ReportWanoptNetstat(ctx context.Context, in *DebugWanoptNetstat, opts ...grpc.CallOption) (*Empty, error)
	// cgnat
	OnCGNATEvent(ctx context.Context, in *CGNATEvent, opts ...grpc.CallOption) (*Empty, error)
	// DeviceHA
	ReportDeviceHAStatus(ctx context.Context, in *DeviceHAStatus, opts ...grpc.CallOption) (*Empty, error)
}

type cubsEventReportClient struct {
	cc *grpc.ClientConn
}

func NewCubsEventReportClient(cc *grpc.ClientConn) CubsEventReportClient {
	return &cubsEventReportClient{cc}
}

func (c *cubsEventReportClient) ClientInfoUpdate(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/ClientInfoUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) ClientTimeout(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/ClientTimeout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) UserLogin(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/UserLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) UserLogout(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/UserLogout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) IPChanged(ctx context.Context, in *Interfaces, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/IPChanged", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) InterfaceStatusChange(ctx context.Context, in *Interfaces, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/InterfaceStatusChange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) LivemonStopped(ctx context.Context, in *Interface, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/LivemonStopped", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) LinkStateChange(ctx context.Context, in *Interfaces, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/LinkStateChange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) PortStateChange(ctx context.Context, in *Ports, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/PortStateChange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) FirmwareDownloadDone(ctx context.Context, in *FirmwareDownloaded, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/FirmwareDownloadDone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) FirmwareDownloadReport(ctx context.Context, in *FirmwareDownloadProcess, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/FirmwareDownloadReport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) FirmwareUpgradeStart(ctx context.Context, in *FirmwareUpgradeStarted, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/FirmwareUpgradeStart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) SystemAlert(ctx context.Context, in *SystemAlertMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/SystemAlert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) PackageUpgradeStart(ctx context.Context, in *PackageUpgradeStartMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/PackageUpgradeStart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) PackageUpgradeResult(ctx context.Context, in *PackageUpgradeResultMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/PackageUpgradeResult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) DiskLogUpload(ctx context.Context, in *DiskLogUploadMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/DiskLogUpload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) USBDeviceDetected(ctx context.Context, in *USBDeviceInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/USBDeviceDetected", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) USBDeviceRemoved(ctx context.Context, in *USBDeviceInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/USBDeviceRemoved", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) VPNTestDone(ctx context.Context, in *VPNTestResult, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/VPNTestDone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) OnVPNEvent(ctx context.Context, in *VPNEvent, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/OnVPNEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) TunnelEstablished(ctx context.Context, in *DebugTunnelInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/TunnelEstablished", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) TunnelDisconnected(ctx context.Context, in *DebugTunnelInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/TunnelDisconnected", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) CommandExecuted(ctx context.Context, in *DebugCommand, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/CommandExecuted", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) PingDone(ctx context.Context, in *PingReport, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/PingDone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) TracerouteDone(ctx context.Context, in *TracerouteReport, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/TracerouteDone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) DNSQueryDone(ctx context.Context, in *DNSReport, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/DNSQueryDone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) PacketCaptureStopped(ctx context.Context, in *PacketCaptureReport, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/PacketCaptureStopped", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) PacketCaptureUploaded(ctx context.Context, in *PacketCaptureUploadedMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/PacketCaptureUploaded", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) ListPathDone(ctx context.Context, in *ListPathReport, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/ListPathDone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) ReportDeviceLog(ctx context.Context, opts ...grpc.CallOption) (CubsEventReport_ReportDeviceLogClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CubsEventReport_serviceDesc.Streams[0], c.cc, "/events.CubsEventReport/ReportDeviceLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &cubsEventReportReportDeviceLogClient{stream}
	return x, nil
}

type CubsEventReport_ReportDeviceLogClient interface {
	Send(*Devicelog) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type cubsEventReportReportDeviceLogClient struct {
	grpc.ClientStream
}

func (x *cubsEventReportReportDeviceLogClient) Send(m *Devicelog) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cubsEventReportReportDeviceLogClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cubsEventReportClient) ReportDNSAnswer(ctx context.Context, opts ...grpc.CallOption) (CubsEventReport_ReportDNSAnswerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CubsEventReport_serviceDesc.Streams[1], c.cc, "/events.CubsEventReport/ReportDNSAnswer", opts...)
	if err != nil {
		return nil, err
	}
	x := &cubsEventReportReportDNSAnswerClient{stream}
	return x, nil
}

type CubsEventReport_ReportDNSAnswerClient interface {
	Send(*DnsAnswer) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type cubsEventReportReportDNSAnswerClient struct {
	grpc.ClientStream
}

func (x *cubsEventReportReportDNSAnswerClient) Send(m *DnsAnswer) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cubsEventReportReportDNSAnswerClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cubsEventReportClient) ReportARPTable(ctx context.Context, in *ARPTable, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/ReportARPTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) ReportWanoptNetstat(ctx context.Context, in *DebugWanoptNetstat, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/ReportWanoptNetstat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) OnCGNATEvent(ctx context.Context, in *CGNATEvent, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/OnCGNATEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cubsEventReportClient) ReportDeviceHAStatus(ctx context.Context, in *DeviceHAStatus, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/events.CubsEventReport/ReportDeviceHAStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CubsEventReport service

type CubsEventReportServer interface {
	// client
	ClientInfoUpdate(context.Context, *ClientInfo) (*Empty, error)
	ClientTimeout(context.Context, *ClientInfo) (*Empty, error)
	UserLogin(context.Context, *UserInfo) (*Empty, error)
	UserLogout(context.Context, *UserInfo) (*Empty, error)
	// interfaces
	IPChanged(context.Context, *Interfaces) (*Empty, error)
	InterfaceStatusChange(context.Context, *Interfaces) (*Empty, error)
	LivemonStopped(context.Context, *Interface) (*Empty, error)
	LinkStateChange(context.Context, *Interfaces) (*Empty, error)
	PortStateChange(context.Context, *Ports) (*Empty, error)
	// system
	FirmwareDownloadDone(context.Context, *FirmwareDownloaded) (*Empty, error)
	FirmwareDownloadReport(context.Context, *FirmwareDownloadProcess) (*Empty, error)
	FirmwareUpgradeStart(context.Context, *FirmwareUpgradeStarted) (*Empty, error)
	SystemAlert(context.Context, *SystemAlertMessage) (*Empty, error)
	PackageUpgradeStart(context.Context, *PackageUpgradeStartMessage) (*Empty, error)
	PackageUpgradeResult(context.Context, *PackageUpgradeResultMessage) (*Empty, error)
	DiskLogUpload(context.Context, *DiskLogUploadMessage) (*Empty, error)
	// usb
	USBDeviceDetected(context.Context, *USBDeviceInfo) (*Empty, error)
	USBDeviceRemoved(context.Context, *USBDeviceInfo) (*Empty, error)
	// vpn
	VPNTestDone(context.Context, *VPNTestResult) (*Empty, error)
	OnVPNEvent(context.Context, *VPNEvent) (*Empty, error)
	// debug-tun
	TunnelEstablished(context.Context, *DebugTunnelInfo) (*Empty, error)
	TunnelDisconnected(context.Context, *DebugTunnelInfo) (*Empty, error)
	// debug-runcmd
	CommandExecuted(context.Context, *DebugCommand) (*Empty, error)
	// ping done
	PingDone(context.Context, *PingReport) (*Empty, error)
	// traceroute done
	TracerouteDone(context.Context, *TracerouteReport) (*Empty, error)
	// dns query done
	DNSQueryDone(context.Context, *DNSReport) (*Empty, error)
	// pcap stop
	PacketCaptureStopped(context.Context, *PacketCaptureReport) (*Empty, error)
	PacketCaptureUploaded(context.Context, *PacketCaptureUploadedMessage) (*Empty, error)
	// list-path-done
	ListPathDone(context.Context, *ListPathReport) (*Empty, error)
	// syslog
	ReportDeviceLog(CubsEventReport_ReportDeviceLogServer) error
	// dns
	ReportDNSAnswer(CubsEventReport_ReportDNSAnswerServer) error
	// arp
	ReportARPTable(context.Context, *ARPTable) (*Empty, error)
	// debug-wanopt
	ReportWanoptNetstat(context.Context, *DebugWanoptNetstat) (*Empty, error)
	// cgnat
	OnCGNATEvent(context.Context, *CGNATEvent) (*Empty, error)
	// DeviceHA
	ReportDeviceHAStatus(context.Context, *DeviceHAStatus) (*Empty, error)
}

func RegisterCubsEventReportServer(s *grpc.Server, srv CubsEventReportServer) {
	s.RegisterService(&_CubsEventReport_serviceDesc, srv)
}

func _CubsEventReport_ClientInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).ClientInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/ClientInfoUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).ClientInfoUpdate(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_ClientTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).ClientTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/ClientTimeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).ClientTimeout(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).UserLogin(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_UserLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).UserLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/UserLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).UserLogout(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_IPChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Interfaces)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).IPChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/IPChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).IPChanged(ctx, req.(*Interfaces))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_InterfaceStatusChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Interfaces)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).InterfaceStatusChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/InterfaceStatusChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).InterfaceStatusChange(ctx, req.(*Interfaces))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_LivemonStopped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Interface)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).LivemonStopped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/LivemonStopped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).LivemonStopped(ctx, req.(*Interface))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_LinkStateChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Interfaces)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).LinkStateChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/LinkStateChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).LinkStateChange(ctx, req.(*Interfaces))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_PortStateChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ports)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).PortStateChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/PortStateChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).PortStateChange(ctx, req.(*Ports))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_FirmwareDownloadDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirmwareDownloaded)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).FirmwareDownloadDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/FirmwareDownloadDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).FirmwareDownloadDone(ctx, req.(*FirmwareDownloaded))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_FirmwareDownloadReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirmwareDownloadProcess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).FirmwareDownloadReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/FirmwareDownloadReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).FirmwareDownloadReport(ctx, req.(*FirmwareDownloadProcess))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_FirmwareUpgradeStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirmwareUpgradeStarted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).FirmwareUpgradeStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/FirmwareUpgradeStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).FirmwareUpgradeStart(ctx, req.(*FirmwareUpgradeStarted))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_SystemAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemAlertMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).SystemAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/SystemAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).SystemAlert(ctx, req.(*SystemAlertMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_PackageUpgradeStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageUpgradeStartMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).PackageUpgradeStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/PackageUpgradeStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).PackageUpgradeStart(ctx, req.(*PackageUpgradeStartMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_PackageUpgradeResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageUpgradeResultMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).PackageUpgradeResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/PackageUpgradeResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).PackageUpgradeResult(ctx, req.(*PackageUpgradeResultMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_DiskLogUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskLogUploadMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).DiskLogUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/DiskLogUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).DiskLogUpload(ctx, req.(*DiskLogUploadMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_USBDeviceDetected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(USBDeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).USBDeviceDetected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/USBDeviceDetected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).USBDeviceDetected(ctx, req.(*USBDeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_USBDeviceRemoved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(USBDeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).USBDeviceRemoved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/USBDeviceRemoved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).USBDeviceRemoved(ctx, req.(*USBDeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_VPNTestDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPNTestResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).VPNTestDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/VPNTestDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).VPNTestDone(ctx, req.(*VPNTestResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_OnVPNEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPNEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).OnVPNEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/OnVPNEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).OnVPNEvent(ctx, req.(*VPNEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_TunnelEstablished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugTunnelInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).TunnelEstablished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/TunnelEstablished",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).TunnelEstablished(ctx, req.(*DebugTunnelInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_TunnelDisconnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugTunnelInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).TunnelDisconnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/TunnelDisconnected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).TunnelDisconnected(ctx, req.(*DebugTunnelInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_CommandExecuted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).CommandExecuted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/CommandExecuted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).CommandExecuted(ctx, req.(*DebugCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_PingDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).PingDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/PingDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).PingDone(ctx, req.(*PingReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_TracerouteDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TracerouteReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).TracerouteDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/TracerouteDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).TracerouteDone(ctx, req.(*TracerouteReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_DNSQueryDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNSReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).DNSQueryDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/DNSQueryDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).DNSQueryDone(ctx, req.(*DNSReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_PacketCaptureStopped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PacketCaptureReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).PacketCaptureStopped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/PacketCaptureStopped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).PacketCaptureStopped(ctx, req.(*PacketCaptureReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_PacketCaptureUploaded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PacketCaptureUploadedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).PacketCaptureUploaded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/PacketCaptureUploaded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).PacketCaptureUploaded(ctx, req.(*PacketCaptureUploadedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_ListPathDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPathReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).ListPathDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/ListPathDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).ListPathDone(ctx, req.(*ListPathReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_ReportDeviceLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CubsEventReportServer).ReportDeviceLog(&cubsEventReportReportDeviceLogServer{stream})
}

type CubsEventReport_ReportDeviceLogServer interface {
	SendAndClose(*Empty) error
	Recv() (*Devicelog, error)
	grpc.ServerStream
}

type cubsEventReportReportDeviceLogServer struct {
	grpc.ServerStream
}

func (x *cubsEventReportReportDeviceLogServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cubsEventReportReportDeviceLogServer) Recv() (*Devicelog, error) {
	m := new(Devicelog)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CubsEventReport_ReportDNSAnswer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CubsEventReportServer).ReportDNSAnswer(&cubsEventReportReportDNSAnswerServer{stream})
}

type CubsEventReport_ReportDNSAnswerServer interface {
	SendAndClose(*Empty) error
	Recv() (*DnsAnswer, error)
	grpc.ServerStream
}

type cubsEventReportReportDNSAnswerServer struct {
	grpc.ServerStream
}

func (x *cubsEventReportReportDNSAnswerServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cubsEventReportReportDNSAnswerServer) Recv() (*DnsAnswer, error) {
	m := new(DnsAnswer)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CubsEventReport_ReportARPTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ARPTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).ReportARPTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/ReportARPTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).ReportARPTable(ctx, req.(*ARPTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_ReportWanoptNetstat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugWanoptNetstat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).ReportWanoptNetstat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/ReportWanoptNetstat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).ReportWanoptNetstat(ctx, req.(*DebugWanoptNetstat))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_OnCGNATEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGNATEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).OnCGNATEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/OnCGNATEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).OnCGNATEvent(ctx, req.(*CGNATEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _CubsEventReport_ReportDeviceHAStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceHAStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CubsEventReportServer).ReportDeviceHAStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.CubsEventReport/ReportDeviceHAStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CubsEventReportServer).ReportDeviceHAStatus(ctx, req.(*DeviceHAStatus))
	}
	return interceptor(ctx, in, info, handler)
}

var _CubsEventReport_serviceDesc = grpc.ServiceDesc{
	ServiceName: "events.CubsEventReport",
	HandlerType: (*CubsEventReportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientInfoUpdate",
			Handler:    _CubsEventReport_ClientInfoUpdate_Handler,
		},
		{
			MethodName: "ClientTimeout",
			Handler:    _CubsEventReport_ClientTimeout_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _CubsEventReport_UserLogin_Handler,
		},
		{
			MethodName: "UserLogout",
			Handler:    _CubsEventReport_UserLogout_Handler,
		},
		{
			MethodName: "IPChanged",
			Handler:    _CubsEventReport_IPChanged_Handler,
		},
		{
			MethodName: "InterfaceStatusChange",
			Handler:    _CubsEventReport_InterfaceStatusChange_Handler,
		},
		{
			MethodName: "LivemonStopped",
			Handler:    _CubsEventReport_LivemonStopped_Handler,
		},
		{
			MethodName: "LinkStateChange",
			Handler:    _CubsEventReport_LinkStateChange_Handler,
		},
		{
			MethodName: "PortStateChange",
			Handler:    _CubsEventReport_PortStateChange_Handler,
		},
		{
			MethodName: "FirmwareDownloadDone",
			Handler:    _CubsEventReport_FirmwareDownloadDone_Handler,
		},
		{
			MethodName: "FirmwareDownloadReport",
			Handler:    _CubsEventReport_FirmwareDownloadReport_Handler,
		},
		{
			MethodName: "FirmwareUpgradeStart",
			Handler:    _CubsEventReport_FirmwareUpgradeStart_Handler,
		},
		{
			MethodName: "SystemAlert",
			Handler:    _CubsEventReport_SystemAlert_Handler,
		},
		{
			MethodName: "PackageUpgradeStart",
			Handler:    _CubsEventReport_PackageUpgradeStart_Handler,
		},
		{
			MethodName: "PackageUpgradeResult",
			Handler:    _CubsEventReport_PackageUpgradeResult_Handler,
		},
		{
			MethodName: "DiskLogUpload",
			Handler:    _CubsEventReport_DiskLogUpload_Handler,
		},
		{
			MethodName: "USBDeviceDetected",
			Handler:    _CubsEventReport_USBDeviceDetected_Handler,
		},
		{
			MethodName: "USBDeviceRemoved",
			Handler:    _CubsEventReport_USBDeviceRemoved_Handler,
		},
		{
			MethodName: "VPNTestDone",
			Handler:    _CubsEventReport_VPNTestDone_Handler,
		},
		{
			MethodName: "OnVPNEvent",
			Handler:    _CubsEventReport_OnVPNEvent_Handler,
		},
		{
			MethodName: "TunnelEstablished",
			Handler:    _CubsEventReport_TunnelEstablished_Handler,
		},
		{
			MethodName: "TunnelDisconnected",
			Handler:    _CubsEventReport_TunnelDisconnected_Handler,
		},
		{
			MethodName: "CommandExecuted",
			Handler:    _CubsEventReport_CommandExecuted_Handler,
		},
		{
			MethodName: "PingDone",
			Handler:    _CubsEventReport_PingDone_Handler,
		},
		{
			MethodName: "TracerouteDone",
			Handler:    _CubsEventReport_TracerouteDone_Handler,
		},
		{
			MethodName: "DNSQueryDone",
			Handler:    _CubsEventReport_DNSQueryDone_Handler,
		},
		{
			MethodName: "PacketCaptureStopped",
			Handler:    _CubsEventReport_PacketCaptureStopped_Handler,
		},
		{
			MethodName: "PacketCaptureUploaded",
			Handler:    _CubsEventReport_PacketCaptureUploaded_Handler,
		},
		{
			MethodName: "ListPathDone",
			Handler:    _CubsEventReport_ListPathDone_Handler,
		},
		{
			MethodName: "ReportARPTable",
			Handler:    _CubsEventReport_ReportARPTable_Handler,
		},
		{
			MethodName: "ReportWanoptNetstat",
			Handler:    _CubsEventReport_ReportWanoptNetstat_Handler,
		},
		{
			MethodName: "OnCGNATEvent",
			Handler:    _CubsEventReport_OnCGNATEvent_Handler,
		},
		{
			MethodName: "ReportDeviceHAStatus",
			Handler:    _CubsEventReport_ReportDeviceHAStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportDeviceLog",
			Handler:       _CubsEventReport_ReportDeviceLog_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReportDNSAnswer",
			Handler:       _CubsEventReport_ReportDNSAnswer_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "cubs_ev.proto",
}

func init() { proto.RegisterFile("cubs_ev.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 833 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0xdf, 0x73, 0xdb, 0x44,
	0x10, 0xc7, 0xe1, 0x81, 0x42, 0x36, 0x4e, 0x6c, 0xab, 0x49, 0xcb, 0x18, 0x06, 0x66, 0x02, 0x0f,
	0x3c, 0x05, 0x68, 0x0a, 0x61, 0x0a, 0x94, 0x71, 0xad, 0x50, 0xc2, 0x18, 0x55, 0xc4, 0x76, 0x79,
	0xf4, 0x9c, 0xa5, 0xad, 0xac, 0x89, 0x74, 0x77, 0x73, 0x77, 0x72, 0xc8, 0x3f, 0xc9, 0xdf, 0xc4,
	0xe8, 0x4e, 0xa7, 0x1f, 0x91, 0x34, 0xe3, 0xbe, 0x59, 0xdf, 0xef, 0x7e, 0x56, 0x7b, 0xab, 0xbd,
	0x3b, 0xc3, 0x51, 0x90, 0x6d, 0xe4, 0x1a, 0x77, 0xe7, 0x5c, 0x30, 0xc5, 0x9c, 0x47, 0xb8, 0x43,
	0xaa, 0xe4, 0x64, 0xb8, 0xe3, 0x74, 0xad, 0x7f, 0x1b, 0x63, 0x32, 0x08, 0x92, 0xb8, 0x7a, 0x72,
	0x42, 0xdc, 0x64, 0xd1, 0x5a, 0x64, 0x34, 0x48, 0xc3, 0x42, 0x1b, 0x1a, 0x4d, 0x65, 0xb4, 0x10,
	0x46, 0x21, 0x95, 0x6b, 0x81, 0x9c, 0x09, 0x8b, 0x8d, 0x62, 0xaa, 0x50, 0xbc, 0x23, 0x01, 0xca,
	0x42, 0x19, 0x73, 0xa2, 0xb6, 0xcd, 0xa0, 0x31, 0x0f, 0x08, 0x6f, 0x4a, 0x03, 0x79, 0x2f, 0x15,
	0xa6, 0xc5, 0xd3, 0x53, 0x25, 0x48, 0x80, 0x82, 0x65, 0x0a, 0x9b, 0x61, 0x07, 0x99, 0xdc, 0xd4,
	0x88, 0x84, 0x45, 0xd6, 0x08, 0xa9, 0x7d, 0xe1, 0x01, 0x11, 0xbc, 0xf8, 0x39, 0x31, 0x05, 0xdf,
	0x11, 0xca, 0xb8, 0x5a, 0x53, 0x54, 0x52, 0x11, 0x9b, 0x0a, 0x78, 0x4c, 0x2d, 0x7d, 0x18, 0x44,
	0xb4, 0x34, 0x8e, 0x43, 0xdc, 0xc5, 0x01, 0x6e, 0x89, 0x79, 0x3e, 0xfb, 0x18, 0x3e, 0xba, 0x4a,
	0xb9, 0xba, 0x7f, 0xf6, 0xdf, 0x08, 0x86, 0xb3, 0x6c, 0x23, 0xaf, 0xf2, 0xa6, 0xdd, 0xe8, 0xb2,
	0x9c, 0x4b, 0x18, 0xcd, 0x74, 0xdb, 0xae, 0xe9, 0x3b, 0xb6, 0xe2, 0x21, 0x51, 0xe8, 0x38, 0xe7,
	0xa6, 0xc5, 0xe7, 0x95, 0x33, 0x39, 0xb2, 0x9a, 0x4e, 0x75, 0xf6, 0x81, 0xf3, 0x1c, 0x8e, 0x8c,
	0xbd, 0x8c, 0x53, 0x64, 0x99, 0xda, 0x8f, 0x3a, 0x87, 0x83, 0x95, 0x44, 0x31, 0x67, 0x51, 0x4c,
	0x9d, 0x91, 0x75, 0x73, 0xa9, 0x3b, 0xfe, 0x5b, 0x80, 0x22, 0x3e, 0x7f, 0xc5, 0x1e, 0xc0, 0x77,
	0x70, 0x70, 0xed, 0xcf, 0xb6, 0x84, 0x46, 0x18, 0x56, 0x25, 0x5d, 0x97, 0x1f, 0xb5, 0x4d, 0xfc,
	0x02, 0xa7, 0xa5, 0xbd, 0x50, 0x44, 0x65, 0xd2, 0xe0, 0xfb, 0xd1, 0xcf, 0xe1, 0x78, 0x1e, 0xef,
	0x30, 0x65, 0x74, 0xa1, 0x18, 0xe7, 0x18, 0x3a, 0xe3, 0x16, 0xd6, 0xa6, 0x7e, 0x84, 0xe1, 0x3c,
	0xa6, 0xb7, 0xf9, 0xeb, 0xf0, 0x7d, 0xde, 0xf6, 0x3d, 0x0c, 0x7d, 0x26, 0x54, 0x9d, 0x2b, 0x63,
	0x72, 0xa3, 0x03, 0x99, 0xc1, 0xc9, 0xef, 0xb1, 0x48, 0xef, 0x88, 0x40, 0x97, 0xdd, 0xd1, 0x84,
	0x91, 0xd0, 0x65, 0x14, 0x9d, 0x89, 0x0d, 0x7c, 0xe8, 0x62, 0xd8, 0x4e, 0xf2, 0x27, 0x3c, 0x79,
	0x18, 0x56, 0xcc, 0xcf, 0x97, 0x7d, 0x69, 0x7c, 0xc1, 0x02, 0x94, 0x1d, 0x05, 0xbd, 0xae, 0x0a,
	0x5a, 0xf1, 0x48, 0x90, 0x30, 0xef, 0xba, 0x50, 0xce, 0x17, 0x0f, 0x33, 0xd5, 0xdd, 0xae, 0xa2,
	0x5e, 0xc0, 0xe1, 0x42, 0x6f, 0xba, 0x69, 0x82, 0x42, 0x55, 0x0b, 0xaa, 0x89, 0x7f, 0xa1, 0x94,
	0x24, 0xc2, 0xae, 0x05, 0x3d, 0xf6, 0x49, 0x70, 0x4b, 0xa2, 0x66, 0x0d, 0x67, 0x65, 0x33, 0xdb,
	0x66, 0x6f, 0xae, 0x39, 0x9c, 0x34, 0xc3, 0x6f, 0x50, 0x66, 0x89, 0x72, 0xbe, 0xea, 0x4e, 0x66,
	0xdc, 0xde, 0x6c, 0x2f, 0xe1, 0xc8, 0x8d, 0xe5, 0xed, 0x9c, 0x45, 0x2b, 0x9e, 0xf7, 0xd1, 0xf9,
	0xdc, 0x46, 0x34, 0xe4, 0x5e, 0xfe, 0x67, 0x18, 0xaf, 0x16, 0xaf, 0x5c, 0x7d, 0x04, 0xb8, 0xa8,
	0x30, 0x50, 0x18, 0x3a, 0xa7, 0xe5, 0xc6, 0xb1, 0x56, 0xf7, 0xee, 0x79, 0x01, 0xa3, 0x32, 0xe2,
	0x06, 0x53, 0xb6, 0x7b, 0x0f, 0xf6, 0x07, 0x38, 0x7c, 0xeb, 0x7b, 0x4b, 0x94, 0x4a, 0xcf, 0x57,
	0x89, 0x15, 0xa2, 0x59, 0x76, 0xe7, 0x0e, 0x7f, 0x43, 0xdf, 0xfa, 0x9e, 0x3e, 0x94, 0xaa, 0x1d,
	0x6e, 0x95, 0x36, 0xf0, 0x2b, 0x8c, 0x97, 0x19, 0xa5, 0x98, 0x5c, 0x49, 0x45, 0x36, 0x49, 0x2c,
	0xb7, 0x18, 0x3a, 0x4f, 0xcb, 0x26, 0xe5, 0x07, 0xa6, 0xf1, 0xbb, 0xcb, 0x7c, 0x09, 0x8e, 0xb1,
	0xdd, 0x58, 0x06, 0x8c, 0x52, 0xd3, 0xa0, 0xfd, 0xf9, 0x9f, 0x60, 0x38, 0x63, 0x69, 0x4a, 0x68,
	0x78, 0xf5, 0x2f, 0x06, 0x59, 0x0e, 0x9f, 0x34, 0xe0, 0xc2, 0xed, 0x5a, 0xe9, 0x27, 0x7e, 0x4c,
	0x23, 0xdd, 0x9d, 0x72, 0xb7, 0xe7, 0x8a, 0xd9, 0x4a, 0x5d, 0x9f, 0xf2, 0x78, 0x59, 0xde, 0x23,
	0x1a, 0xfb, 0xd4, 0x86, 0x54, 0x7a, 0x1f, 0xfc, 0x0c, 0x06, 0xae, 0xb7, 0xf8, 0x3b, 0x43, 0x71,
	0xaf, 0xd1, 0xf2, 0x58, 0x72, 0xbd, 0x45, 0x1f, 0xe3, 0x9a, 0x49, 0x46, 0x35, 0x23, 0x5c, 0x65,
	0x02, 0xed, 0x91, 0xf6, 0x59, 0x7d, 0x92, 0x4b, 0xb7, 0x2f, 0x8b, 0x07, 0xa7, 0x8d, 0x38, 0x33,
	0xb0, 0x18, 0x3a, 0x5f, 0x77, 0xa6, 0xb1, 0x76, 0xef, 0x44, 0x5f, 0xc2, 0x60, 0x1e, 0x4b, 0xe5,
	0x13, 0xb5, 0xd5, 0x2b, 0x79, 0x62, 0x03, 0xac, 0xda, 0x57, 0xc8, 0x25, 0x0c, 0x8d, 0x65, 0xc6,
	0x76, 0xce, 0xa2, 0x5a, 0x17, 0xb4, 0x94, 0xb0, 0xa8, 0x85, 0x7d, 0xf3, 0x61, 0x0d, 0xf4, 0x16,
	0x53, 0x2a, 0xef, 0x50, 0xd4, 0x40, 0x2a, 0x8d, 0xd4, 0x05, 0x5e, 0xc0, 0xb1, 0x01, 0xa7, 0x37,
	0xfe, 0x92, 0x6c, 0x12, 0xac, 0x06, 0xda, 0x2a, 0xed, 0x32, 0x5f, 0xc1, 0x63, 0x03, 0xfd, 0xa3,
	0xaf, 0x79, 0xcf, 0xdc, 0xf2, 0xd5, 0x79, 0xa6, 0xa7, 0xaa, 0xe1, 0xb5, 0x73, 0x5c, 0xc0, 0xe0,
	0x0d, 0x9d, 0xbd, 0xf6, 0xa6, 0x4b, 0xb3, 0x8f, 0xaa, 0xcb, 0xb8, 0xd4, 0xda, 0xd0, 0x6f, 0x70,
	0x52, 0xef, 0xcf, 0x1f, 0x53, 0x73, 0xfd, 0x55, 0x0d, 0x6e, 0xea, 0xad, 0x04, 0x9b, 0x47, 0xfa,
	0x0f, 0xc6, 0xc5, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xee, 0xfe, 0xe6, 0xa9, 0xa2, 0x09, 0x00,
	0x00,
}
